import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import { createElement } from "@wordpress/element";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * External dependencies
 */
import { debounce } from 'lodash';
/**
 * WordPress dependencies
 */

import { useState, useMemo, useEffect } from '@wordpress/element';
import { useSelect, useDispatch } from '@wordpress/data';
import { __ } from '@wordpress/i18n';
import { ComboboxControl } from '@wordpress/components';
/**
 * Internal dependencies
 */

import PostAuthorCheck from './check';

function PostAuthor() {
  var _useState = useState(),
      _useState2 = _slicedToArray(_useState, 2),
      fieldValue = _useState2[0],
      setFieldValue = _useState2[1];

  var _useSelect = useSelect(function (select) {
    var _select = select('core'),
        getUser = _select.getUser,
        getUsers = _select.getUsers,
        isResolving = _select.isResolving;

    var _select2 = select('core/editor'),
        getEditedPostAttribute = _select2.getEditedPostAttribute;

    var author = getUser(getEditedPostAttribute('author'));
    var query = !fieldValue || '' === fieldValue ? {} : {
      search: fieldValue
    };
    return {
      authorId: getEditedPostAttribute('author'),
      postAuthor: author,
      authors: getUsers(_objectSpread({
        who: 'authors'
      }, query)),
      isLoading: isResolving('core', 'getUsers', [{
        search: fieldValue,
        who: 'authors'
      }])
    };
  }, [fieldValue]),
      authorId = _useSelect.authorId,
      isLoading = _useSelect.isLoading,
      authors = _useSelect.authors,
      postAuthor = _useSelect.postAuthor;

  var _useDispatch = useDispatch('core/editor'),
      editPost = _useDispatch.editPost;

  var authorOptions = useMemo(function () {
    var fetchedAuthors = (authors !== null && authors !== void 0 ? authors : []).map(function (author) {
      return {
        value: author.id,
        label: author.name
      };
    }); // Ensure the current author is included in the dropdown list.

    var foundAuthor = fetchedAuthors.findIndex(function (_ref) {
      var value = _ref.value;
      return (postAuthor === null || postAuthor === void 0 ? void 0 : postAuthor.id) === value;
    });

    if (foundAuthor < 0 && postAuthor) {
      return [{
        value: postAuthor.id,
        label: postAuthor.name
      }].concat(_toConsumableArray(fetchedAuthors));
    }

    return fetchedAuthors;
  }, [authors, postAuthor]); // Initializes the post author properly
  // Also ensures external changes are reflected.

  useEffect(function () {
    if (postAuthor) {
      setFieldValue(postAuthor.name);
    }
  }, [postAuthor]);
  /**
   * Handle author selection.
   *
   * @param {number} postAuthorId The selected Author.
   */

  var handleSelect = function handleSelect(postAuthorId) {
    if (!postAuthorId) {
      return;
    }

    editPost({
      author: postAuthorId
    });
  };
  /**
   * Handle user input.
   *
   * @param {string} inputValue The current value of the input field.
   */


  var handleKeydown = function handleKeydown(inputValue) {
    setFieldValue(inputValue);
  };

  if (!postAuthor) {
    return null;
  }

  return createElement(PostAuthorCheck, null, createElement(ComboboxControl, {
    label: __('Author'),
    options: authorOptions,
    value: authorId,
    onFilterValueChange: debounce(handleKeydown, 300),
    onChange: handleSelect,
    isLoading: isLoading,
    allowReset: false
  }));
}

export default PostAuthor;
//# sourceMappingURL=index.js.map