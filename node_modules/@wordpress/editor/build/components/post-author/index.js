"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _element = require("@wordpress/element");

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _lodash = require("lodash");

var _data = require("@wordpress/data");

var _i18n = require("@wordpress/i18n");

var _components = require("@wordpress/components");

var _check = _interopRequireDefault(require("./check"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function PostAuthor() {
  var _useState = (0, _element.useState)(),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      fieldValue = _useState2[0],
      setFieldValue = _useState2[1];

  var _useSelect = (0, _data.useSelect)(function (select) {
    var _select = select('core'),
        getUser = _select.getUser,
        getUsers = _select.getUsers,
        isResolving = _select.isResolving;

    var _select2 = select('core/editor'),
        getEditedPostAttribute = _select2.getEditedPostAttribute;

    var author = getUser(getEditedPostAttribute('author'));
    var query = !fieldValue || '' === fieldValue ? {} : {
      search: fieldValue
    };
    return {
      authorId: getEditedPostAttribute('author'),
      postAuthor: author,
      authors: getUsers(_objectSpread({
        who: 'authors'
      }, query)),
      isLoading: isResolving('core', 'getUsers', [{
        search: fieldValue,
        who: 'authors'
      }])
    };
  }, [fieldValue]),
      authorId = _useSelect.authorId,
      isLoading = _useSelect.isLoading,
      authors = _useSelect.authors,
      postAuthor = _useSelect.postAuthor;

  var _useDispatch = (0, _data.useDispatch)('core/editor'),
      editPost = _useDispatch.editPost;

  var authorOptions = (0, _element.useMemo)(function () {
    var fetchedAuthors = (authors !== null && authors !== void 0 ? authors : []).map(function (author) {
      return {
        value: author.id,
        label: author.name
      };
    }); // Ensure the current author is included in the dropdown list.

    var foundAuthor = fetchedAuthors.findIndex(function (_ref) {
      var value = _ref.value;
      return (postAuthor === null || postAuthor === void 0 ? void 0 : postAuthor.id) === value;
    });

    if (foundAuthor < 0 && postAuthor) {
      return [{
        value: postAuthor.id,
        label: postAuthor.name
      }].concat((0, _toConsumableArray2.default)(fetchedAuthors));
    }

    return fetchedAuthors;
  }, [authors, postAuthor]); // Initializes the post author properly
  // Also ensures external changes are reflected.

  (0, _element.useEffect)(function () {
    if (postAuthor) {
      setFieldValue(postAuthor.name);
    }
  }, [postAuthor]);
  /**
   * Handle author selection.
   *
   * @param {number} postAuthorId The selected Author.
   */

  var handleSelect = function handleSelect(postAuthorId) {
    if (!postAuthorId) {
      return;
    }

    editPost({
      author: postAuthorId
    });
  };
  /**
   * Handle user input.
   *
   * @param {string} inputValue The current value of the input field.
   */


  var handleKeydown = function handleKeydown(inputValue) {
    setFieldValue(inputValue);
  };

  if (!postAuthor) {
    return null;
  }

  return (0, _element.createElement)(_check.default, null, (0, _element.createElement)(_components.ComboboxControl, {
    label: (0, _i18n.__)('Author'),
    options: authorOptions,
    value: authorId,
    onFilterValueChange: (0, _lodash.debounce)(handleKeydown, 300),
    onChange: handleSelect,
    isLoading: isLoading,
    allowReset: false
  }));
}

var _default = PostAuthor;
exports.default = _default;
//# sourceMappingURL=index.js.map