import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import { createElement } from "@wordpress/element";

/**
 * External dependencies
 */
import { omit } from 'lodash';
/**
 * WordPress dependencies
 */

import { Button } from '@wordpress/components';
import { useDispatch, useSelect } from '@wordpress/data';
/**
 * Internal dependencies
 */

import complementaryAreaContext from '../complementary-area-context';

function ComplementaryAreaToggle(_ref) {
  var _ref$as = _ref.as,
      as = _ref$as === void 0 ? Button : _ref$as,
      scope = _ref.scope,
      identifier = _ref.identifier,
      icon = _ref.icon,
      selectedIcon = _ref.selectedIcon,
      props = _objectWithoutProperties(_ref, ["as", "scope", "identifier", "icon", "selectedIcon"]);

  var ComponentToUse = as;
  var isSelected = useSelect(function (select) {
    return select('core/interface').getActiveComplementaryArea(scope) === identifier;
  }, [identifier]);

  var _useDispatch = useDispatch('core/interface'),
      enableComplementaryArea = _useDispatch.enableComplementaryArea,
      disableComplementaryArea = _useDispatch.disableComplementaryArea;

  return createElement(ComponentToUse, _extends({
    icon: selectedIcon && isSelected ? selectedIcon : icon,
    onClick: function onClick() {
      if (isSelected) {
        disableComplementaryArea(scope);
      } else {
        enableComplementaryArea(scope, identifier);
      }
    }
  }, omit(props, ['name'])));
}

export default complementaryAreaContext(ComplementaryAreaToggle);
//# sourceMappingURL=index.js.map