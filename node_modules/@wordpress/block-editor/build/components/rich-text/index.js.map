{"version":3,"sources":["@wordpress/block-editor/src/components/rich-text/index.js"],"names":["wrapperClasses","classes","getMultilineTag","multiline","getAllowedFormats","allowedFormats","formattingControls","disableFormats","EMPTY_ARRAY","alternative","map","name","isShortcode","text","test","RichTextWrapper","forwardedRef","children","tagName","originalValue","value","originalOnChange","onChange","originalIsSelected","isSelected","inlineToolbar","wrapperClassName","autocompleters","onReplace","placeholder","keepPlaceholderOnFocus","withoutInteractiveFormatting","onRemove","onMerge","onSplit","onSplitAtEnd","__unstableOnSplitAtEnd","onSplitMiddle","__unstableOnSplitMiddle","identifier","preserveWhiteSpace","__unstableEmbedURLOnPaste","__unstableDisableFormats","disableLineBreaks","unstableOnFocus","__unstableAllowPrefixTransformations","__unstableMultilineRootTag","__unstableMobileNoFocusOnMount","deleteEnter","placeholderTextColor","textAlign","selectionColor","tagsToEliminate","rootTagsToEliminate","disableEditingMenu","fontSize","fontFamily","fontWeight","fontStyle","minWidth","maxWidth","onBlur","setRef","props","instanceId","fallbackRef","ref","clientId","onCaretVerticalPositionChange","blockIsSelected","selector","select","isCaretWithinFormattedText","getSelectionStart","getSelectionEnd","getSettings","didAutomaticChange","__unstableGetBlockWithoutInnerBlocks","isMultiSelecting","hasMultiSelection","selectionStart","selectionEnd","undo","__experimentalUndo","undefined","attributeKey","extraProps","Platform","OS","block","shouldBlurOnUnmount","offset","disabled","__unstableMarkLastChangeAsPersistent","enterFormattedText","exitFormattedText","selectionChange","__unstableMarkAutomaticChange","multilineTag","adjustedAllowedFormats","hasFormats","length","adjustedValue","adjustedOnChange","Array","isArray","childrenSource","toHTML","newValue","fromDOM","document","childNodes","onSelectionChange","start","end","onDelete","isReverse","splitValue","record","pastedBlocks","blocks","before","after","hasPastedBlocks","lastPastedBlockIndex","push","indexToSelect","initialPosition","onEnter","shiftKey","canSplit","transforms","filter","type","transformation","item","regExp","transform","content","canSplitAtEnd","onPaste","html","plainText","files","activeFormats","HTML","mode","window","console","log","trim","valueToInsert","index","formats","LINE_SEPARATOR","inputRule","valueToFormat","characterBefore","slice","trimmedTextBefore","prefixTransforms","prefix","id","style","nestedIsSelected","onFocus","editableProps","TagName","editableTagName","current","listBoxId","activeId","onKeyDown","className","event","ForwardedRichTextContainer","Content","Tag","MultilineTag","isEmpty","defaultProps","format"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport classnames from 'classnames';\nimport { omit } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport {\n\tRawHTML,\n\tPlatform,\n\tuseRef,\n\tuseCallback,\n\tforwardRef,\n} from '@wordpress/element';\nimport { useDispatch, useSelect } from '@wordpress/data';\nimport {\n\tpasteHandler,\n\tchildren as childrenSource,\n\tgetBlockTransforms,\n\tfindTransform,\n\tisUnmodifiedDefaultBlock,\n} from '@wordpress/blocks';\nimport { useInstanceId } from '@wordpress/compose';\nimport {\n\t__experimentalRichText as RichText,\n\t__unstableCreateElement,\n\tisEmpty,\n\t__unstableIsEmptyLine as isEmptyLine,\n\tinsert,\n\t__unstableInsertLineSeparator as insertLineSeparator,\n\tcreate,\n\treplace,\n\tsplit,\n\t__UNSTABLE_LINE_SEPARATOR as LINE_SEPARATOR,\n\ttoHTMLString,\n\tslice,\n} from '@wordpress/rich-text';\nimport deprecated from '@wordpress/deprecated';\nimport { isURL } from '@wordpress/url';\nimport { regexp } from '@wordpress/shortcode';\n\n/**\n * Internal dependencies\n */\nimport Autocomplete from '../autocomplete';\nimport { useBlockEditContext } from '../block-edit';\nimport { RemoveBrowserShortcuts } from './remove-browser-shortcuts';\nimport { filePasteHandler } from './file-paste-handler';\nimport FormatToolbarContainer from './format-toolbar-container';\n\nconst wrapperClasses = 'block-editor-rich-text';\nconst classes = 'block-editor-rich-text__editable';\n\n/**\n * Get the multiline tag based on the multiline prop.\n *\n * @param {?(string|boolean)} multiline The multiline prop.\n *\n * @return {?string} The multiline tag.\n */\nfunction getMultilineTag( multiline ) {\n\tif ( multiline !== true && multiline !== 'p' && multiline !== 'li' ) {\n\t\treturn;\n\t}\n\n\treturn multiline === true ? 'p' : multiline;\n}\n\nfunction getAllowedFormats( {\n\tallowedFormats,\n\tformattingControls,\n\tdisableFormats,\n} ) {\n\tif ( disableFormats ) {\n\t\treturn getAllowedFormats.EMPTY_ARRAY;\n\t}\n\n\tif ( ! allowedFormats && ! formattingControls ) {\n\t\treturn;\n\t}\n\n\tif ( allowedFormats ) {\n\t\treturn allowedFormats;\n\t}\n\n\tdeprecated( 'wp.blockEditor.RichText formattingControls prop', {\n\t\talternative: 'allowedFormats',\n\t} );\n\n\treturn formattingControls.map( ( name ) => `core/${ name }` );\n}\n\ngetAllowedFormats.EMPTY_ARRAY = [];\n\nconst isShortcode = ( text ) => regexp( '.*' ).test( text );\n\nfunction RichTextWrapper(\n\t{\n\t\tchildren,\n\t\ttagName,\n\t\tvalue: originalValue,\n\t\tonChange: originalOnChange,\n\t\tisSelected: originalIsSelected,\n\t\tmultiline,\n\t\tinlineToolbar,\n\t\twrapperClassName,\n\t\tautocompleters,\n\t\tonReplace,\n\t\tplaceholder,\n\t\tkeepPlaceholderOnFocus,\n\t\tallowedFormats,\n\t\tformattingControls,\n\t\twithoutInteractiveFormatting,\n\t\tonRemove,\n\t\tonMerge,\n\t\tonSplit,\n\t\t__unstableOnSplitAtEnd: onSplitAtEnd,\n\t\t__unstableOnSplitMiddle: onSplitMiddle,\n\t\tidentifier,\n\t\tpreserveWhiteSpace,\n\t\t__unstableEmbedURLOnPaste,\n\t\t__unstableDisableFormats: disableFormats,\n\t\tdisableLineBreaks,\n\t\tunstableOnFocus,\n\t\t__unstableAllowPrefixTransformations,\n\t\t__unstableMultilineRootTag,\n\t\t// Native props.\n\t\t__unstableMobileNoFocusOnMount,\n\t\tdeleteEnter,\n\t\tplaceholderTextColor,\n\t\ttextAlign,\n\t\tselectionColor,\n\t\ttagsToEliminate,\n\t\trootTagsToEliminate,\n\t\tdisableEditingMenu,\n\t\tfontSize,\n\t\tfontFamily,\n\t\tfontWeight,\n\t\tfontStyle,\n\t\tminWidth,\n\t\tmaxWidth,\n\t\tonBlur,\n\t\tsetRef,\n\t\t...props\n\t},\n\tforwardedRef\n) {\n\tconst instanceId = useInstanceId( RichTextWrapper );\n\n\tidentifier = identifier || instanceId;\n\n\tconst fallbackRef = useRef();\n\tconst ref = forwardedRef || fallbackRef;\n\tconst {\n\t\tclientId,\n\t\tonCaretVerticalPositionChange,\n\t\tisSelected: blockIsSelected,\n\t} = useBlockEditContext();\n\tconst selector = ( select ) => {\n\t\tconst {\n\t\t\tisCaretWithinFormattedText,\n\t\t\tgetSelectionStart,\n\t\t\tgetSelectionEnd,\n\t\t\tgetSettings,\n\t\t\tdidAutomaticChange,\n\t\t\t__unstableGetBlockWithoutInnerBlocks,\n\t\t\tisMultiSelecting,\n\t\t\thasMultiSelection,\n\t\t} = select( 'core/block-editor' );\n\n\t\tconst selectionStart = getSelectionStart();\n\t\tconst selectionEnd = getSelectionEnd();\n\t\tconst { __experimentalUndo: undo } = getSettings();\n\n\t\tlet isSelected;\n\n\t\tif ( originalIsSelected === undefined ) {\n\t\t\tisSelected =\n\t\t\t\tselectionStart.clientId === clientId &&\n\t\t\t\tselectionStart.attributeKey === identifier;\n\t\t} else if ( originalIsSelected ) {\n\t\t\tisSelected = selectionStart.clientId === clientId;\n\t\t}\n\n\t\tlet extraProps = {};\n\t\tif ( Platform.OS === 'native' ) {\n\t\t\t// If the block of this RichText is unmodified then it's a candidate for replacing when adding a new block.\n\t\t\t// In order to fix https://github.com/wordpress-mobile/gutenberg-mobile/issues/1126, let's blur on unmount in that case.\n\t\t\t// This apparently assumes functionality the BlockHlder actually\n\t\t\tconst block =\n\t\t\t\tclientId && __unstableGetBlockWithoutInnerBlocks( clientId );\n\t\t\tconst shouldBlurOnUnmount =\n\t\t\t\tblock && isSelected && isUnmodifiedDefaultBlock( block );\n\t\t\textraProps = {\n\t\t\t\tshouldBlurOnUnmount,\n\t\t\t};\n\t\t}\n\n\t\treturn {\n\t\t\tisCaretWithinFormattedText: isCaretWithinFormattedText(),\n\t\t\tselectionStart: isSelected ? selectionStart.offset : undefined,\n\t\t\tselectionEnd: isSelected ? selectionEnd.offset : undefined,\n\t\t\tisSelected,\n\t\t\tdidAutomaticChange: didAutomaticChange(),\n\t\t\tdisabled: isMultiSelecting() || hasMultiSelection(),\n\t\t\tundo,\n\t\t\t...extraProps,\n\t\t};\n\t};\n\t// This selector must run on every render so the right selection state is\n\t// retreived from the store on merge.\n\t// To do: fix this somehow.\n\tconst {\n\t\tisCaretWithinFormattedText,\n\t\tselectionStart,\n\t\tselectionEnd,\n\t\tisSelected,\n\t\tdidAutomaticChange,\n\t\tdisabled,\n\t\tundo,\n\t\tshouldBlurOnUnmount,\n\t} = useSelect( selector );\n\tconst {\n\t\t__unstableMarkLastChangeAsPersistent,\n\t\tenterFormattedText,\n\t\texitFormattedText,\n\t\tselectionChange,\n\t\t__unstableMarkAutomaticChange,\n\t} = useDispatch( 'core/block-editor' );\n\tconst multilineTag = getMultilineTag( multiline );\n\tconst adjustedAllowedFormats = getAllowedFormats( {\n\t\tallowedFormats,\n\t\tformattingControls,\n\t\tdisableFormats,\n\t} );\n\tconst hasFormats =\n\t\t! adjustedAllowedFormats || adjustedAllowedFormats.length > 0;\n\tlet adjustedValue = originalValue;\n\tlet adjustedOnChange = originalOnChange;\n\n\t// Handle deprecated format.\n\tif ( Array.isArray( originalValue ) ) {\n\t\tadjustedValue = childrenSource.toHTML( originalValue );\n\t\tadjustedOnChange = ( newValue ) =>\n\t\t\toriginalOnChange(\n\t\t\t\tchildrenSource.fromDOM(\n\t\t\t\t\t__unstableCreateElement( document, newValue ).childNodes\n\t\t\t\t)\n\t\t\t);\n\t}\n\n\tconst onSelectionChange = useCallback(\n\t\t( start, end ) => {\n\t\t\tselectionChange( clientId, identifier, start, end );\n\t\t},\n\t\t[ clientId, identifier ]\n\t);\n\n\tconst onDelete = useCallback(\n\t\t( { value, isReverse } ) => {\n\t\t\tif ( onMerge ) {\n\t\t\t\tonMerge( ! isReverse );\n\t\t\t}\n\n\t\t\t// Only handle remove on Backspace. This serves dual-purpose of being\n\t\t\t// an intentional user interaction distinguishing between Backspace and\n\t\t\t// Delete to remove the empty field, but also to avoid merge & remove\n\t\t\t// causing destruction of two fields (merge, then removed merged).\n\t\t\tif ( onRemove && isEmpty( value ) && isReverse ) {\n\t\t\t\tonRemove( ! isReverse );\n\t\t\t}\n\t\t},\n\t\t[ onMerge, onRemove ]\n\t);\n\n\t/**\n\t * Signals to the RichText owner that the block can be replaced with two\n\t * blocks as a result of splitting the block by pressing enter, or with\n\t * blocks as a result of splitting the block by pasting block content in the\n\t * instance.\n\t *\n\t * @param  {Object} record       The rich text value to split.\n\t * @param  {Array}  pastedBlocks The pasted blocks to insert, if any.\n\t */\n\tconst splitValue = useCallback(\n\t\t( record, pastedBlocks = [] ) => {\n\t\t\tif ( ! onReplace || ! onSplit ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst blocks = [];\n\t\t\tconst [ before, after ] = split( record );\n\t\t\tconst hasPastedBlocks = pastedBlocks.length > 0;\n\t\t\tlet lastPastedBlockIndex = -1;\n\n\t\t\t// Create a block with the content before the caret if there's no pasted\n\t\t\t// blocks, or if there are pasted blocks and the value is not empty.\n\t\t\t// We do not want a leading empty block on paste, but we do if split\n\t\t\t// with e.g. the enter key.\n\t\t\tif ( ! hasPastedBlocks || ! isEmpty( before ) ) {\n\t\t\t\tblocks.push(\n\t\t\t\t\tonSplit(\n\t\t\t\t\t\ttoHTMLString( {\n\t\t\t\t\t\t\tvalue: before,\n\t\t\t\t\t\t\tmultilineTag,\n\t\t\t\t\t\t} )\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t\tlastPastedBlockIndex += 1;\n\t\t\t}\n\n\t\t\tif ( hasPastedBlocks ) {\n\t\t\t\tblocks.push( ...pastedBlocks );\n\t\t\t\tlastPastedBlockIndex += pastedBlocks.length;\n\t\t\t} else if ( onSplitMiddle ) {\n\t\t\t\tblocks.push( onSplitMiddle() );\n\t\t\t}\n\n\t\t\t// If there's pasted blocks, append a block with non empty content\n\t\t\t/// after the caret. Otherwise, do append an empty block if there\n\t\t\t// is no `onSplitMiddle` prop, but if there is and the content is\n\t\t\t// empty, the middle block is enough to set focus in.\n\t\t\tif (\n\t\t\t\thasPastedBlocks\n\t\t\t\t\t? ! isEmpty( after )\n\t\t\t\t\t: ! onSplitMiddle || ! isEmpty( after )\n\t\t\t) {\n\t\t\t\tblocks.push(\n\t\t\t\t\tonSplit(\n\t\t\t\t\t\ttoHTMLString( {\n\t\t\t\t\t\t\tvalue: after,\n\t\t\t\t\t\t\tmultilineTag,\n\t\t\t\t\t\t} )\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// If there are pasted blocks, set the selection to the last one.\n\t\t\t// Otherwise, set the selection to the second block.\n\t\t\tconst indexToSelect = hasPastedBlocks ? lastPastedBlockIndex : 1;\n\n\t\t\t// If there are pasted blocks, move the caret to the end of the selected block\n\t\t\t// Otherwise, retain the default value.\n\t\t\tconst initialPosition = hasPastedBlocks ? -1 : null;\n\n\t\t\tonReplace( blocks, indexToSelect, initialPosition );\n\t\t},\n\t\t[ onReplace, onSplit, multilineTag, onSplitMiddle ]\n\t);\n\n\tconst onEnter = useCallback(\n\t\t( { value, onChange, shiftKey } ) => {\n\t\t\tconst canSplit = onReplace && onSplit;\n\n\t\t\tif ( onReplace ) {\n\t\t\t\tconst transforms = getBlockTransforms( 'from' ).filter(\n\t\t\t\t\t( { type } ) => type === 'enter'\n\t\t\t\t);\n\t\t\t\tconst transformation = findTransform( transforms, ( item ) => {\n\t\t\t\t\treturn item.regExp.test( value.text );\n\t\t\t\t} );\n\n\t\t\t\tif ( transformation ) {\n\t\t\t\t\tonReplace( [\n\t\t\t\t\t\ttransformation.transform( { content: value.text } ),\n\t\t\t\t\t] );\n\t\t\t\t\t__unstableMarkAutomaticChange();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( multiline ) {\n\t\t\t\tif ( shiftKey ) {\n\t\t\t\t\tif ( ! disableLineBreaks ) {\n\t\t\t\t\t\tonChange( insert( value, '\\n' ) );\n\t\t\t\t\t}\n\t\t\t\t} else if ( canSplit && isEmptyLine( value ) ) {\n\t\t\t\t\tsplitValue( value );\n\t\t\t\t} else {\n\t\t\t\t\tonChange( insertLineSeparator( value ) );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst { text, start, end } = value;\n\t\t\t\tconst canSplitAtEnd =\n\t\t\t\t\tonSplitAtEnd && start === end && end === text.length;\n\n\t\t\t\tif ( shiftKey || ( ! canSplit && ! canSplitAtEnd ) ) {\n\t\t\t\t\tif ( ! disableLineBreaks ) {\n\t\t\t\t\t\tonChange( insert( value, '\\n' ) );\n\t\t\t\t\t}\n\t\t\t\t} else if ( ! canSplit && canSplitAtEnd ) {\n\t\t\t\t\tonSplitAtEnd();\n\t\t\t\t} else if ( canSplit ) {\n\t\t\t\t\tsplitValue( value );\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t[\n\t\t\tonReplace,\n\t\t\tonSplit,\n\t\t\t__unstableMarkAutomaticChange,\n\t\t\tmultiline,\n\t\t\tsplitValue,\n\t\t\tonSplitAtEnd,\n\t\t]\n\t);\n\n\tconst onPaste = useCallback(\n\t\t( { value, onChange, html, plainText, files, activeFormats } ) => {\n\t\t\t// Only process file if no HTML is present.\n\t\t\t// Note: a pasted file may have the URL as plain text.\n\t\t\tif ( files && files.length && ! html ) {\n\t\t\t\tconst content = pasteHandler( {\n\t\t\t\t\tHTML: filePasteHandler( files ),\n\t\t\t\t\tmode: 'BLOCKS',\n\t\t\t\t\ttagName,\n\t\t\t\t\tpreserveWhiteSpace,\n\t\t\t\t} );\n\n\t\t\t\t// Allows us to ask for this information when we get a report.\n\t\t\t\t// eslint-disable-next-line no-console\n\t\t\t\twindow.console.log( 'Received items:\\n\\n', files );\n\n\t\t\t\tif ( onReplace && isEmpty( value ) ) {\n\t\t\t\t\tonReplace( content );\n\t\t\t\t} else {\n\t\t\t\t\tsplitValue( value, content );\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet mode = onReplace && onSplit ? 'AUTO' : 'INLINE';\n\n\t\t\t// Force the blocks mode when the user is pasting\n\t\t\t// on a new line & the content resembles a shortcode.\n\t\t\t// Otherwise it's going to be detected as inline\n\t\t\t// and the shortcode won't be replaced.\n\t\t\tif (\n\t\t\t\tmode === 'AUTO' &&\n\t\t\t\tisEmpty( value ) &&\n\t\t\t\tisShortcode( plainText )\n\t\t\t) {\n\t\t\t\tmode = 'BLOCKS';\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\t__unstableEmbedURLOnPaste &&\n\t\t\t\tisEmpty( value ) &&\n\t\t\t\tisURL( plainText.trim() )\n\t\t\t) {\n\t\t\t\tmode = 'BLOCKS';\n\t\t\t}\n\n\t\t\tconst content = pasteHandler( {\n\t\t\t\tHTML: html,\n\t\t\t\tplainText,\n\t\t\t\tmode,\n\t\t\t\ttagName,\n\t\t\t\tpreserveWhiteSpace,\n\t\t\t} );\n\n\t\t\tif ( typeof content === 'string' ) {\n\t\t\t\tlet valueToInsert = create( { html: content } );\n\n\t\t\t\t// If there are active formats, merge them with the pasted formats.\n\t\t\t\tif ( activeFormats.length ) {\n\t\t\t\t\tlet index = valueToInsert.formats.length;\n\n\t\t\t\t\twhile ( index-- ) {\n\t\t\t\t\t\tvalueToInsert.formats[ index ] = [\n\t\t\t\t\t\t\t...activeFormats,\n\t\t\t\t\t\t\t...( valueToInsert.formats[ index ] || [] ),\n\t\t\t\t\t\t];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// If the content should be multiline, we should process text\n\t\t\t\t// separated by a line break as separate lines.\n\t\t\t\tif ( multiline ) {\n\t\t\t\t\tvalueToInsert = replace(\n\t\t\t\t\t\tvalueToInsert,\n\t\t\t\t\t\t/\\n+/g,\n\t\t\t\t\t\tLINE_SEPARATOR\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tonChange( insert( value, valueToInsert ) );\n\t\t\t} else if ( content.length > 0 ) {\n\t\t\t\tif ( onReplace && isEmpty( value ) ) {\n\t\t\t\t\tonReplace( content, content.length - 1, -1 );\n\t\t\t\t} else {\n\t\t\t\t\tsplitValue( value, content );\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t[\n\t\t\ttagName,\n\t\t\tonReplace,\n\t\t\tonSplit,\n\t\t\tsplitValue,\n\t\t\t__unstableEmbedURLOnPaste,\n\t\t\tmultiline,\n\t\t\tpreserveWhiteSpace,\n\t\t]\n\t);\n\n\tconst inputRule = useCallback(\n\t\t( value, valueToFormat ) => {\n\t\t\tif ( ! onReplace ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst { start, text } = value;\n\t\t\tconst characterBefore = text.slice( start - 1, start );\n\n\t\t\t// The character right before the caret must be a plain space.\n\t\t\tif ( characterBefore !== ' ' ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst trimmedTextBefore = text.slice( 0, start ).trim();\n\t\t\tconst prefixTransforms = getBlockTransforms( 'from' ).filter(\n\t\t\t\t( { type } ) => type === 'prefix'\n\t\t\t);\n\t\t\tconst transformation = findTransform(\n\t\t\t\tprefixTransforms,\n\t\t\t\t( { prefix } ) => {\n\t\t\t\t\treturn trimmedTextBefore === prefix;\n\t\t\t\t}\n\t\t\t);\n\n\t\t\tif ( ! transformation ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst content = valueToFormat( slice( value, start, text.length ) );\n\t\t\tconst block = transformation.transform( content );\n\n\t\t\tonReplace( [ block ] );\n\t\t\t__unstableMarkAutomaticChange();\n\t\t},\n\t\t[ onReplace, __unstableMarkAutomaticChange ]\n\t);\n\n\tconst content = (\n\t\t<RichText\n\t\t\tclientId={ clientId }\n\t\t\tidentifier={ identifier }\n\t\t\tref={ ref }\n\t\t\tvalue={ adjustedValue }\n\t\t\tonChange={ adjustedOnChange }\n\t\t\tselectionStart={ selectionStart }\n\t\t\tselectionEnd={ selectionEnd }\n\t\t\tonSelectionChange={ onSelectionChange }\n\t\t\ttagName={ tagName }\n\t\t\tplaceholder={ placeholder }\n\t\t\tallowedFormats={ adjustedAllowedFormats }\n\t\t\twithoutInteractiveFormatting={ withoutInteractiveFormatting }\n\t\t\tonEnter={ onEnter }\n\t\t\tonDelete={ onDelete }\n\t\t\tonPaste={ onPaste }\n\t\t\t__unstableIsSelected={ isSelected }\n\t\t\t__unstableInputRule={ inputRule }\n\t\t\t__unstableMultilineTag={ multilineTag }\n\t\t\t__unstableIsCaretWithinFormattedText={ isCaretWithinFormattedText }\n\t\t\t__unstableOnEnterFormattedText={ enterFormattedText }\n\t\t\t__unstableOnExitFormattedText={ exitFormattedText }\n\t\t\t__unstableOnCreateUndoLevel={ __unstableMarkLastChangeAsPersistent }\n\t\t\t__unstableMarkAutomaticChange={ __unstableMarkAutomaticChange }\n\t\t\t__unstableDidAutomaticChange={ didAutomaticChange }\n\t\t\t__unstableUndo={ undo }\n\t\t\t__unstableDisableFormats={ disableFormats }\n\t\t\tpreserveWhiteSpace={ preserveWhiteSpace }\n\t\t\tdisabled={ disabled }\n\t\t\tunstableOnFocus={ unstableOnFocus }\n\t\t\t__unstableAllowPrefixTransformations={\n\t\t\t\t__unstableAllowPrefixTransformations\n\t\t\t}\n\t\t\t__unstableMultilineRootTag={ __unstableMultilineRootTag }\n\t\t\t// Native props.\n\t\t\tonCaretVerticalPositionChange={ onCaretVerticalPositionChange }\n\t\t\tblockIsSelected={\n\t\t\t\toriginalIsSelected !== undefined\n\t\t\t\t\t? originalIsSelected\n\t\t\t\t\t: blockIsSelected\n\t\t\t}\n\t\t\tshouldBlurOnUnmount={ shouldBlurOnUnmount }\n\t\t\t__unstableMobileNoFocusOnMount={ __unstableMobileNoFocusOnMount }\n\t\t\tdeleteEnter={ deleteEnter }\n\t\t\tplaceholderTextColor={ placeholderTextColor }\n\t\t\ttextAlign={ textAlign }\n\t\t\tselectionColor={ selectionColor }\n\t\t\ttagsToEliminate={ tagsToEliminate }\n\t\t\trootTagsToEliminate={ rootTagsToEliminate }\n\t\t\tdisableEditingMenu={ disableEditingMenu }\n\t\t\tfontSize={ fontSize }\n\t\t\tfontFamily={ fontFamily }\n\t\t\tfontWeight={ fontWeight }\n\t\t\tfontStyle={ fontStyle }\n\t\t\tminWidth={ minWidth }\n\t\t\tmaxWidth={ maxWidth }\n\t\t\tonBlur={ onBlur }\n\t\t\tsetRef={ setRef }\n\t\t\t// Props to be set on the editable container are destructured on the\n\t\t\t// element itself for web (see below), but passed through rich text\n\t\t\t// for native.\n\t\t\tid={ props.id }\n\t\t\tstyle={ props.style }\n\t\t>\n\t\t\t{ ( {\n\t\t\t\tisSelected: nestedIsSelected,\n\t\t\t\tvalue,\n\t\t\t\tonChange,\n\t\t\t\tonFocus,\n\t\t\t\teditableProps,\n\t\t\t\teditableTagName: TagName,\n\t\t\t} ) => (\n\t\t\t\t<>\n\t\t\t\t\t{ children && children( { value, onChange, onFocus } ) }\n\t\t\t\t\t{ nestedIsSelected && hasFormats && (\n\t\t\t\t\t\t<FormatToolbarContainer\n\t\t\t\t\t\t\tinline={ inlineToolbar }\n\t\t\t\t\t\t\tanchorRef={ ref.current }\n\t\t\t\t\t\t/>\n\t\t\t\t\t) }\n\t\t\t\t\t{ nestedIsSelected && <RemoveBrowserShortcuts /> }\n\t\t\t\t\t<Autocomplete\n\t\t\t\t\t\tonReplace={ onReplace }\n\t\t\t\t\t\tcompleters={ autocompleters }\n\t\t\t\t\t\trecord={ value }\n\t\t\t\t\t\tonChange={ onChange }\n\t\t\t\t\t\tisSelected={ nestedIsSelected }\n\t\t\t\t\t>\n\t\t\t\t\t\t{ ( { listBoxId, activeId, onKeyDown } ) => (\n\t\t\t\t\t\t\t<TagName\n\t\t\t\t\t\t\t\t{ ...editableProps }\n\t\t\t\t\t\t\t\t{ ...props }\n\t\t\t\t\t\t\t\tstyle={\n\t\t\t\t\t\t\t\t\tprops.style\n\t\t\t\t\t\t\t\t\t\t? {\n\t\t\t\t\t\t\t\t\t\t\t\t...props.style,\n\t\t\t\t\t\t\t\t\t\t\t\t...editableProps.style,\n\t\t\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\t\t\t: editableProps.style\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tclassName={ classnames(\n\t\t\t\t\t\t\t\t\tclasses,\n\t\t\t\t\t\t\t\t\tprops.className,\n\t\t\t\t\t\t\t\t\teditableProps.className,\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t'keep-placeholder-on-focus': keepPlaceholderOnFocus,\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t) }\n\t\t\t\t\t\t\t\taria-autocomplete={\n\t\t\t\t\t\t\t\t\tlistBoxId ? 'list' : undefined\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\taria-owns={ listBoxId }\n\t\t\t\t\t\t\t\taria-activedescendant={ activeId }\n\t\t\t\t\t\t\t\tonKeyDown={ ( event ) => {\n\t\t\t\t\t\t\t\t\tonKeyDown( event );\n\t\t\t\t\t\t\t\t\teditableProps.onKeyDown( event );\n\t\t\t\t\t\t\t\t} }\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t) }\n\t\t\t\t\t</Autocomplete>\n\t\t\t\t</>\n\t\t\t) }\n\t\t</RichText>\n\t);\n\n\tif ( ! wrapperClassName ) {\n\t\treturn content;\n\t}\n\n\tdeprecated( 'wp.blockEditor.RichText wrapperClassName prop', {\n\t\talternative: 'className prop or create your own wrapper div',\n\t} );\n\n\treturn (\n\t\t<div className={ classnames( wrapperClasses, wrapperClassName ) }>\n\t\t\t{ content }\n\t\t</div>\n\t);\n}\n\nconst ForwardedRichTextContainer = forwardRef( RichTextWrapper );\n\nForwardedRichTextContainer.Content = ( {\n\tvalue,\n\ttagName: Tag,\n\tmultiline,\n\t...props\n} ) => {\n\t// Handle deprecated `children` and `node` sources.\n\tif ( Array.isArray( value ) ) {\n\t\tvalue = childrenSource.toHTML( value );\n\t}\n\n\tconst MultilineTag = getMultilineTag( multiline );\n\n\tif ( ! value && MultilineTag ) {\n\t\tvalue = `<${ MultilineTag }></${ MultilineTag }>`;\n\t}\n\n\tconst content = <RawHTML>{ value }</RawHTML>;\n\n\tif ( Tag ) {\n\t\treturn <Tag { ...omit( props, [ 'format' ] ) }>{ content }</Tag>;\n\t}\n\n\treturn content;\n};\n\nForwardedRichTextContainer.isEmpty = ( value ) => {\n\treturn ! value || value.length === 0;\n};\n\nForwardedRichTextContainer.Content.defaultProps = {\n\tformat: 'string',\n\tvalue: '',\n};\n\n/**\n * @see https://github.com/WordPress/gutenberg/blob/master/packages/block-editor/src/components/rich-text/README.md\n */\nexport default ForwardedRichTextContainer;\nexport { RichTextShortcut } from './shortcut';\nexport { RichTextToolbarButton } from './toolbar-button';\nexport { __unstableRichTextInputEvent } from './input-event';\n"]}