{"version":3,"sources":["@wordpress/block-editor/src/store/selectors.js"],"names":["MILLISECONDS_PER_HOUR","MILLISECONDS_PER_DAY","MILLISECONDS_PER_WEEK","templateIcon","EMPTY_ARRAY","getBlockName","state","clientId","block","blocks","byClientId","socialLinkName","Platform","OS","name","attributes","service","isBlockValid","isValid","getBlockAttributes","getBlock","innerBlocks","areInnerBlocksControlled","getBlocks","cache","__unstableGetBlockWithoutInnerBlocks","rootClientId","getBlockOrder","order","id","__unstableGetBlockWithBlockTree","__unstableGetBlockTree","getClientIdsOfDescendants","clientIds","descendants","getClientIdsWithDescendants","topLevelIds","getGlobalBlockCount","blockName","length","accumulator","getBlocksByClientId","getBlockCount","getSelectionStart","selectionStart","getSelectionEnd","selectionEnd","getBlockSelectionStart","getBlockSelectionEnd","getSelectedBlockCount","multiSelectedBlockCount","getMultiSelectedBlockClientIds","hasSelectedBlock","getSelectedBlockClientId","getSelectedBlock","getBlockRootClientId","parents","undefined","getBlockParents","ascending","current","push","reverse","getBlockParentsByBlockName","Array","isArray","includes","getBlockHierarchyRootClientId","parent","getLowestCommonAncestorWithSelectedBlock","selectedId","clientParents","selectedParents","lowestCommonAncestor","maxDepth","Math","min","index","getAdjacentBlockClientId","startClientId","modifier","getFirstMultiSelectedBlockClientId","getLastMultiSelectedBlockClientId","orderSet","indexOf","nextIndex","getPreviousBlockClientId","getNextBlockClientId","getSelectedBlocksInitialCaretPosition","initialPosition","getSelectedBlockClientIds","blockOrder","startIndex","endIndex","slice","getMultiSelectedBlocks","multiSelectedBlockClientIds","map","getDependants","isFirstMultiSelectedBlock","isBlockMultiSelected","isAncestorMultiSelected","ancestorClientId","isMultiSelected","getMultiSelectedBlocksStartClientId","getMultiSelectedBlocksEndClientId","getBlockIndex","isBlockSelected","hasSelectedInnerBlock","deep","innerClientId","isBlockWithinSelection","hasMultiSelection","isMultiSelecting","isSelectionEnabled","getBlockMode","blocksMode","isTyping","isDraggingBlocks","draggedBlocks","getDraggedBlockClientIds","isBlockBeingDragged","isAncestorBeingDragged","parentClientId","isCaretWithinFormattedText","getBlockInsertionPoint","insertionPoint","isBlockInsertionPointVisible","isValidTemplate","template","getTemplate","settings","getTemplateLock","templateLock","blockListSettings","getBlockListSettings","canInsertBlockTypeUnmemoized","checkAllowList","list","item","defaultResult","blockType","getSettings","allowedBlockTypes","isBlockAllowedInEditor","isLocked","parentBlockListSettings","parentAllowedBlocks","allowedBlocks","hasParentAllowedBlock","blockAllowedParentBlocks","parentName","hasBlockAllowedParent","canInsertBlockType","canInsertBlocks","every","getInsertUsage","preferences","insertUsage","canIncludeBlockTypeInInserter","getItemFromVariation","variation","icon","title","description","example","hasOwnProperty","initialAttributes","keywords","getInserterItems","calculateFrecency","time","count","duration","Date","now","buildBlockTypeInserterItem","isDisabled","inserterVariations","variations","filter","scope","category","utility","frecency","buildReusableBlockInserterItem","reusableBlock","referencedBlocks","__experimentalGetParsedReusableBlock","referencedBlockType","ref","raw","blockTypeInserterItems","reusableBlockInserterItems","getReusableBlocks","visibleBlockTypeInserterItems","some","isDefault","blockVariations","variationMapper","hasInserterItems","hasBlockType","hasReusableBlock","__experimentalGetAllowedBlocks","isLastBlockChangePersistent","isPersistentChange","__experimentalGetBlockListSettingsForBlocks","value","key","content","__unstableIsLastBlockChangeIgnored","isIgnoredChange","__experimentalGetLastBlockAttributeChanges","lastBlockAttributesChange","__experimentalReusableBlocks","isNavigationMode","hasBlockMovingClientId","didAutomaticChange","automaticChangeStatus","isBlockHighlighted","highlightedBlock","controlledInnerBlocks","__experimentalGetActiveBlockIdByBlockNames","validBlockNames","selectedBlockClientId","entityAreaParents"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport {\n\tcastArray,\n\tflatMap,\n\tfirst,\n\tisArray,\n\tisBoolean,\n\tlast,\n\tmap,\n\treduce,\n\tsome,\n\tfind,\n\tfilter,\n} from 'lodash';\nimport createSelector from 'rememo';\n\n/**\n * WordPress dependencies\n */\nimport {\n\tgetBlockType,\n\tgetBlockTypes,\n\thasBlockSupport,\n\tparse,\n} from '@wordpress/blocks';\nimport { SVG, Rect, G, Path } from '@wordpress/components';\nimport { Platform } from '@wordpress/element';\n\n/**\n * A block selection object.\n *\n * @typedef {Object} WPBlockSelection\n *\n * @property {string} clientId     A block client ID.\n * @property {string} attributeKey A block attribute key.\n * @property {number} offset       An attribute value offset, based on the rich\n *                                 text value. See `wp.richText.create`.\n */\n\n// Module constants\nconst MILLISECONDS_PER_HOUR = 3600 * 1000;\nconst MILLISECONDS_PER_DAY = 24 * 3600 * 1000;\nconst MILLISECONDS_PER_WEEK = 7 * 24 * 3600 * 1000;\nconst templateIcon = (\n\t<SVG xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n\t\t<Rect x=\"0\" fill=\"none\" width=\"24\" height=\"24\" />\n\t\t<G>\n\t\t\t<Path d=\"M19 3H5c-1.105 0-2 .895-2 2v14c0 1.105.895 2 2 2h14c1.105 0 2-.895 2-2V5c0-1.105-.895-2-2-2zM6 6h5v5H6V6zm4.5 13C9.12 19 8 17.88 8 16.5S9.12 14 10.5 14s2.5 1.12 2.5 2.5-1.12 2.5-2.5 2.5zm3-6l3-5 3 5h-6z\" />\n\t\t</G>\n\t</SVG>\n);\n\n/**\n * Shared reference to an empty array for cases where it is important to avoid\n * returning a new array reference on every invocation, as in a connected or\n * other pure component which performs `shouldComponentUpdate` check on props.\n * This should be used as a last resort, since the normalized data should be\n * maintained by the reducer result in state.\n *\n * @type {Array}\n */\nconst EMPTY_ARRAY = [];\n\n/**\n * Returns a block's name given its client ID, or null if no block exists with\n * the client ID.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {string} Block name.\n */\nexport function getBlockName( state, clientId ) {\n\tconst block = state.blocks.byClientId[ clientId ];\n\tconst socialLinkName = 'core/social-link';\n\n\tif ( Platform.OS !== 'web' && block?.name === socialLinkName ) {\n\t\tconst attributes = state.blocks.attributes[ clientId ];\n\t\tconst { service } = attributes;\n\n\t\treturn service ? `${ socialLinkName }-${ service }` : socialLinkName;\n\t}\n\treturn block ? block.name : null;\n}\n\n/**\n * Returns whether a block is valid or not.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {boolean} Is Valid.\n */\nexport function isBlockValid( state, clientId ) {\n\tconst block = state.blocks.byClientId[ clientId ];\n\treturn !! block && block.isValid;\n}\n\n/**\n * Returns a block's attributes given its client ID, or null if no block exists with\n * the client ID.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {Object?} Block attributes.\n */\nexport function getBlockAttributes( state, clientId ) {\n\tconst block = state.blocks.byClientId[ clientId ];\n\tif ( ! block ) {\n\t\treturn null;\n\t}\n\n\treturn state.blocks.attributes[ clientId ];\n}\n\n/**\n * Returns a block given its client ID. This is a parsed copy of the block,\n * containing its `blockName`, `clientId`, and current `attributes` state. This\n * is not the block's registration settings, which must be retrieved from the\n * blocks module registration store.\n *\n * getBlock recurses through its inner blocks until all its children blocks have\n * been retrieved. Note that getBlock will not return the child inner blocks of\n * an inner block controller. This is because an inner block controller syncs\n * itself with its own entity, and should therefore not be included with the\n * blocks of a different entity. For example, say you call `getBlocks( TP )` to\n * get the blocks of a template part. If another template part is a child of TP,\n * then the nested template part's child blocks will not be returned. This way,\n * the template block itself is considered part of the parent, but the children\n * are not.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {Object} Parsed block object.\n */\nexport const getBlock = createSelector(\n\t( state, clientId ) => {\n\t\tconst block = state.blocks.byClientId[ clientId ];\n\t\tif ( ! block ) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn {\n\t\t\t...block,\n\t\t\tattributes: getBlockAttributes( state, clientId ),\n\t\t\tinnerBlocks: areInnerBlocksControlled( state, clientId )\n\t\t\t\t? EMPTY_ARRAY\n\t\t\t\t: getBlocks( state, clientId ),\n\t\t};\n\t},\n\t( state, clientId ) => [\n\t\t// Normally, we'd have both `getBlockAttributes` dependencies and\n\t\t// `getBlocks` (children) dependancies here but for performance reasons\n\t\t// we use a denormalized cache key computed in the reducer that takes both\n\t\t// the attributes and inner blocks into account. The value of the cache key\n\t\t// is being changed whenever one of these dependencies is out of date.\n\t\tstate.blocks.cache[ clientId ],\n\t]\n);\n\nexport const __unstableGetBlockWithoutInnerBlocks = createSelector(\n\t( state, clientId ) => {\n\t\tconst block = state.blocks.byClientId[ clientId ];\n\t\tif ( ! block ) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn {\n\t\t\t...block,\n\t\t\tattributes: getBlockAttributes( state, clientId ),\n\t\t};\n\t},\n\t( state, clientId ) => [\n\t\tstate.blocks.byClientId[ clientId ],\n\t\tstate.blocks.attributes[ clientId ],\n\t]\n);\n\n/**\n * Returns all block objects for the current post being edited as an array in\n * the order they appear in the post. Note that this will exclude child blocks\n * of nested inner block controllers.\n *\n * Note: It's important to memoize this selector to avoid return a new instance\n * on each call. We use the block cache state for each top-level block of the\n * given clientID. This way, the selector only refreshes on changes to blocks\n * associated with the given entity, and does not refresh when changes are made\n * to blocks which are part of different inner block controllers.\n *\n * @param {Object}  state        Editor state.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {Object[]} Post blocks.\n */\nexport const getBlocks = createSelector(\n\t( state, rootClientId ) => {\n\t\treturn map( getBlockOrder( state, rootClientId ), ( clientId ) =>\n\t\t\tgetBlock( state, clientId )\n\t\t);\n\t},\n\t( state, rootClientId ) =>\n\t\tmap(\n\t\t\tstate.blocks.order[ rootClientId || '' ],\n\t\t\t( id ) => state.blocks.cache[ id ]\n\t\t)\n);\n\n/**\n * Similar to getBlock, except it will include the entire nested block tree as\n * inner blocks. The normal getBlock selector will exclude sections of the block\n * tree which belong to different entities.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Client ID of the block to get.\n *\n * @return {Object} The block with all\n */\nexport const __unstableGetBlockWithBlockTree = createSelector(\n\t( state, clientId ) => {\n\t\tconst block = state.blocks.byClientId[ clientId ];\n\t\tif ( ! block ) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn {\n\t\t\t...block,\n\t\t\tattributes: getBlockAttributes( state, clientId ),\n\t\t\tinnerBlocks: __unstableGetBlockTree( state, clientId ),\n\t\t};\n\t},\n\t( state ) => [\n\t\tstate.blocks.byClientId,\n\t\tstate.blocks.order,\n\t\tstate.blocks.attributes,\n\t]\n);\n\n/**\n * Similar to getBlocks, except this selector returns the entire block tree\n * represented in the block-editor store from the given root regardless of any\n * inner block controllers.\n *\n * @param {Object}  state        Editor state.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {Object[]} Post blocks.\n */\nexport const __unstableGetBlockTree = createSelector(\n\t( state, rootClientId = '' ) =>\n\t\tmap( getBlockOrder( state, rootClientId ), ( clientId ) =>\n\t\t\t__unstableGetBlockWithBlockTree( state, clientId )\n\t\t),\n\t( state ) => [\n\t\tstate.blocks.byClientId,\n\t\tstate.blocks.order,\n\t\tstate.blocks.attributes,\n\t]\n);\n\n/**\n * Returns an array containing the clientIds of all descendants\n * of the blocks given.\n *\n * @param {Object} state Global application state.\n * @param {Array} clientIds Array of blocks to inspect.\n *\n * @return {Array} ids of descendants.\n */\nexport const getClientIdsOfDescendants = ( state, clientIds ) =>\n\tflatMap( clientIds, ( clientId ) => {\n\t\tconst descendants = getBlockOrder( state, clientId );\n\t\treturn [\n\t\t\t...descendants,\n\t\t\t...getClientIdsOfDescendants( state, descendants ),\n\t\t];\n\t} );\n\n/**\n * Returns an array containing the clientIds of the top-level blocks\n * and their descendants of any depth (for nested blocks).\n *\n * @param {Object} state Global application state.\n *\n * @return {Array} ids of top-level and descendant blocks.\n */\nexport const getClientIdsWithDescendants = createSelector(\n\t( state ) => {\n\t\tconst topLevelIds = getBlockOrder( state );\n\t\treturn [\n\t\t\t...topLevelIds,\n\t\t\t...getClientIdsOfDescendants( state, topLevelIds ),\n\t\t];\n\t},\n\t( state ) => [ state.blocks.order ]\n);\n\n/**\n * Returns the total number of blocks, or the total number of blocks with a specific name in a post.\n * The number returned includes nested blocks.\n *\n * @param {Object}  state     Global application state.\n * @param {?string} blockName Optional block name, if specified only blocks of that type will be counted.\n *\n * @return {number} Number of blocks in the post, or number of blocks with name equal to blockName.\n */\nexport const getGlobalBlockCount = createSelector(\n\t( state, blockName ) => {\n\t\tconst clientIds = getClientIdsWithDescendants( state );\n\t\tif ( ! blockName ) {\n\t\t\treturn clientIds.length;\n\t\t}\n\t\treturn reduce(\n\t\t\tclientIds,\n\t\t\t( accumulator, clientId ) => {\n\t\t\t\tconst block = state.blocks.byClientId[ clientId ];\n\t\t\t\treturn block.name === blockName ? accumulator + 1 : accumulator;\n\t\t\t},\n\t\t\t0\n\t\t);\n\t},\n\t( state ) => [ state.blocks.order, state.blocks.byClientId ]\n);\n\n/**\n * Given an array of block client IDs, returns the corresponding array of block\n * objects.\n *\n * @param {Object}   state     Editor state.\n * @param {string[]} clientIds Client IDs for which blocks are to be returned.\n *\n * @return {WPBlock[]} Block objects.\n */\nexport const getBlocksByClientId = createSelector(\n\t( state, clientIds ) =>\n\t\tmap( castArray( clientIds ), ( clientId ) =>\n\t\t\tgetBlock( state, clientId )\n\t\t),\n\t( state ) => [\n\t\tstate.blocks.byClientId,\n\t\tstate.blocks.order,\n\t\tstate.blocks.attributes,\n\t]\n);\n\n/**\n * Returns the number of blocks currently present in the post.\n *\n * @param {Object}  state        Editor state.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {number} Number of blocks in the post.\n */\nexport function getBlockCount( state, rootClientId ) {\n\treturn getBlockOrder( state, rootClientId ).length;\n}\n\n/**\n * Returns the current selection start block client ID, attribute key and text\n * offset.\n *\n * @param {Object} state Block editor state.\n *\n * @return {WPBlockSelection} Selection start information.\n */\nexport function getSelectionStart( state ) {\n\treturn state.selectionStart;\n}\n\n/**\n * Returns the current selection end block client ID, attribute key and text\n * offset.\n *\n * @param {Object} state Block editor state.\n *\n * @return {WPBlockSelection} Selection end information.\n */\nexport function getSelectionEnd( state ) {\n\treturn state.selectionEnd;\n}\n\n/**\n * Returns the current block selection start. This value may be null, and it\n * may represent either a singular block selection or multi-selection start.\n * A selection is singular if its start and end match.\n *\n * @param {Object} state Global application state.\n *\n * @return {?string} Client ID of block selection start.\n */\nexport function getBlockSelectionStart( state ) {\n\treturn state.selectionStart.clientId;\n}\n\n/**\n * Returns the current block selection end. This value may be null, and it\n * may represent either a singular block selection or multi-selection end.\n * A selection is singular if its start and end match.\n *\n * @param {Object} state Global application state.\n *\n * @return {?string} Client ID of block selection end.\n */\nexport function getBlockSelectionEnd( state ) {\n\treturn state.selectionEnd.clientId;\n}\n\n/**\n * Returns the number of blocks currently selected in the post.\n *\n * @param {Object} state Global application state.\n *\n * @return {number} Number of blocks selected in the post.\n */\nexport function getSelectedBlockCount( state ) {\n\tconst multiSelectedBlockCount = getMultiSelectedBlockClientIds( state )\n\t\t.length;\n\n\tif ( multiSelectedBlockCount ) {\n\t\treturn multiSelectedBlockCount;\n\t}\n\n\treturn state.selectionStart.clientId ? 1 : 0;\n}\n\n/**\n * Returns true if there is a single selected block, or false otherwise.\n *\n * @param {Object} state Editor state.\n *\n * @return {boolean} Whether a single block is selected.\n */\nexport function hasSelectedBlock( state ) {\n\tconst { selectionStart, selectionEnd } = state;\n\treturn (\n\t\t!! selectionStart.clientId &&\n\t\tselectionStart.clientId === selectionEnd.clientId\n\t);\n}\n\n/**\n * Returns the currently selected block client ID, or null if there is no\n * selected block.\n *\n * @param {Object} state Editor state.\n *\n * @return {?string} Selected block client ID.\n */\nexport function getSelectedBlockClientId( state ) {\n\tconst { selectionStart, selectionEnd } = state;\n\tconst { clientId } = selectionStart;\n\n\tif ( ! clientId || clientId !== selectionEnd.clientId ) {\n\t\treturn null;\n\t}\n\n\treturn clientId;\n}\n\n/**\n * Returns the currently selected block, or null if there is no selected block.\n *\n * @param {Object} state Global application state.\n *\n * @return {?Object} Selected block.\n */\nexport function getSelectedBlock( state ) {\n\tconst clientId = getSelectedBlockClientId( state );\n\treturn clientId ? getBlock( state, clientId ) : null;\n}\n\n/**\n * Given a block client ID, returns the root block from which the block is\n * nested, an empty string for top-level blocks, or null if the block does not\n * exist.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block from which to find root client ID.\n *\n * @return {?string} Root client ID, if exists\n */\nexport function getBlockRootClientId( state, clientId ) {\n\treturn state.blocks.parents[ clientId ] !== undefined\n\t\t? state.blocks.parents[ clientId ]\n\t\t: null;\n}\n\n/**\n * Given a block client ID, returns the list of all its parents from top to bottom.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block from which to find root client ID.\n * @param {boolean} ascending Order results from bottom to top (true) or top to bottom (false).\n *\n * @return {Array} ClientIDs of the parent blocks.\n */\nexport const getBlockParents = createSelector(\n\t( state, clientId, ascending = false ) => {\n\t\tconst parents = [];\n\t\tlet current = clientId;\n\t\twhile ( !! state.blocks.parents[ current ] ) {\n\t\t\tcurrent = state.blocks.parents[ current ];\n\t\t\tparents.push( current );\n\t\t}\n\n\t\treturn ascending ? parents : parents.reverse();\n\t},\n\t( state ) => [ state.blocks.parents ]\n);\n\n/**\n * Given a block client ID and a block name, returns the list of all its parents\n * from top to bottom, filtered by the given name(s). For example, if passed\n * 'core/group' as the blockName, it will only return parents which are group\n * blocks. If passed `[ 'core/group', 'core/cover']`, as the blockName, it will\n * return parents which are group blocks and parents which are cover blocks.\n *\n * @param {Object}          state     Editor state.\n * @param {string}          clientId  Block from which to find root client ID.\n * @param {string|string[]} blockName Block name(s) to filter.\n * @param {boolean}         ascending Order results from bottom to top (true) or top to bottom (false).\n *\n * @return {Array} ClientIDs of the parent blocks.\n */\nexport const getBlockParentsByBlockName = createSelector(\n\t( state, clientId, blockName, ascending = false ) => {\n\t\tconst parents = getBlockParents( state, clientId, ascending );\n\t\treturn map(\n\t\t\tfilter(\n\t\t\t\tmap( parents, ( id ) => ( {\n\t\t\t\t\tid,\n\t\t\t\t\tname: getBlockName( state, id ),\n\t\t\t\t} ) ),\n\t\t\t\t( { name } ) => {\n\t\t\t\t\tif ( Array.isArray( blockName ) ) {\n\t\t\t\t\t\treturn blockName.includes( name );\n\t\t\t\t\t}\n\t\t\t\t\treturn name === blockName;\n\t\t\t\t}\n\t\t\t),\n\t\t\t( { id } ) => id\n\t\t);\n\t},\n\t( state ) => [ state.blocks.parents ]\n);\n\n/**\n * Given a block client ID, returns the root of the hierarchy from which the block is nested, return the block itself for root level blocks.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block from which to find root client ID.\n *\n * @return {string} Root client ID\n */\nexport function getBlockHierarchyRootClientId( state, clientId ) {\n\tlet current = clientId;\n\tlet parent;\n\tdo {\n\t\tparent = current;\n\t\tcurrent = state.blocks.parents[ current ];\n\t} while ( current );\n\treturn parent;\n}\n\n/**\n * Given a block client ID, returns the lowest common ancestor with selected client ID.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block from which to find common ancestor client ID.\n *\n * @return {string} Common ancestor client ID or undefined\n */\nexport function getLowestCommonAncestorWithSelectedBlock( state, clientId ) {\n\tconst selectedId = getSelectedBlockClientId( state );\n\tconst clientParents = [ ...getBlockParents( state, clientId ), clientId ];\n\tconst selectedParents = [\n\t\t...getBlockParents( state, selectedId ),\n\t\tselectedId,\n\t];\n\n\tlet lowestCommonAncestor;\n\n\tconst maxDepth = Math.min( clientParents.length, selectedParents.length );\n\tfor ( let index = 0; index < maxDepth; index++ ) {\n\t\tif ( clientParents[ index ] === selectedParents[ index ] ) {\n\t\t\tlowestCommonAncestor = clientParents[ index ];\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn lowestCommonAncestor;\n}\n\n/**\n * Returns the client ID of the block adjacent one at the given reference\n * startClientId and modifier directionality. Defaults start startClientId to\n * the selected block, and direction as next block. Returns null if there is no\n * adjacent block.\n *\n * @param {Object}  state         Editor state.\n * @param {?string} startClientId Optional client ID of block from which to\n *                                search.\n * @param {?number} modifier      Directionality multiplier (1 next, -1\n *                                previous).\n *\n * @return {?string} Return the client ID of the block, or null if none exists.\n */\nexport function getAdjacentBlockClientId( state, startClientId, modifier = 1 ) {\n\t// Default to selected block.\n\tif ( startClientId === undefined ) {\n\t\tstartClientId = getSelectedBlockClientId( state );\n\t}\n\n\t// Try multi-selection starting at extent based on modifier.\n\tif ( startClientId === undefined ) {\n\t\tif ( modifier < 0 ) {\n\t\t\tstartClientId = getFirstMultiSelectedBlockClientId( state );\n\t\t} else {\n\t\t\tstartClientId = getLastMultiSelectedBlockClientId( state );\n\t\t}\n\t}\n\n\t// Validate working start client ID.\n\tif ( ! startClientId ) {\n\t\treturn null;\n\t}\n\n\t// Retrieve start block root client ID, being careful to allow the falsey\n\t// empty string top-level root by explicitly testing against null.\n\tconst rootClientId = getBlockRootClientId( state, startClientId );\n\tif ( rootClientId === null ) {\n\t\treturn null;\n\t}\n\n\tconst { order } = state.blocks;\n\tconst orderSet = order[ rootClientId ];\n\tconst index = orderSet.indexOf( startClientId );\n\tconst nextIndex = index + 1 * modifier;\n\n\t// Block was first in set and we're attempting to get previous.\n\tif ( nextIndex < 0 ) {\n\t\treturn null;\n\t}\n\n\t// Block was last in set and we're attempting to get next.\n\tif ( nextIndex === orderSet.length ) {\n\t\treturn null;\n\t}\n\n\t// Assume incremented index is within the set.\n\treturn orderSet[ nextIndex ];\n}\n\n/**\n * Returns the previous block's client ID from the given reference start ID.\n * Defaults start to the selected block. Returns null if there is no previous\n * block.\n *\n * @param {Object}  state         Editor state.\n * @param {?string} startClientId Optional client ID of block from which to\n *                                search.\n *\n * @return {?string} Adjacent block's client ID, or null if none exists.\n */\nexport function getPreviousBlockClientId( state, startClientId ) {\n\treturn getAdjacentBlockClientId( state, startClientId, -1 );\n}\n\n/**\n * Returns the next block's client ID from the given reference start ID.\n * Defaults start to the selected block. Returns null if there is no next\n * block.\n *\n * @param {Object}  state         Editor state.\n * @param {?string} startClientId Optional client ID of block from which to\n *                                search.\n *\n * @return {?string} Adjacent block's client ID, or null if none exists.\n */\nexport function getNextBlockClientId( state, startClientId ) {\n\treturn getAdjacentBlockClientId( state, startClientId, 1 );\n}\n\n/**\n * Returns the initial caret position for the selected block.\n * This position is to used to position the caret properly when the selected block changes.\n *\n * @param {Object} state Global application state.\n *\n * @return {?Object} Selected block.\n */\nexport function getSelectedBlocksInitialCaretPosition( state ) {\n\treturn state.initialPosition;\n}\n\n/**\n * Returns the current selection set of block client IDs (multiselection or single selection).\n *\n * @param {Object} state Editor state.\n *\n * @return {Array} Multi-selected block client IDs.\n */\nexport const getSelectedBlockClientIds = createSelector(\n\t( state ) => {\n\t\tconst { selectionStart, selectionEnd } = state;\n\n\t\tif (\n\t\t\tselectionStart.clientId === undefined ||\n\t\t\tselectionEnd.clientId === undefined\n\t\t) {\n\t\t\treturn EMPTY_ARRAY;\n\t\t}\n\n\t\tif ( selectionStart.clientId === selectionEnd.clientId ) {\n\t\t\treturn [ selectionStart.clientId ];\n\t\t}\n\n\t\t// Retrieve root client ID to aid in retrieving relevant nested block\n\t\t// order, being careful to allow the falsey empty string top-level root\n\t\t// by explicitly testing against null.\n\t\tconst rootClientId = getBlockRootClientId(\n\t\t\tstate,\n\t\t\tselectionStart.clientId\n\t\t);\n\t\tif ( rootClientId === null ) {\n\t\t\treturn EMPTY_ARRAY;\n\t\t}\n\n\t\tconst blockOrder = getBlockOrder( state, rootClientId );\n\t\tconst startIndex = blockOrder.indexOf( selectionStart.clientId );\n\t\tconst endIndex = blockOrder.indexOf( selectionEnd.clientId );\n\n\t\tif ( startIndex > endIndex ) {\n\t\t\treturn blockOrder.slice( endIndex, startIndex + 1 );\n\t\t}\n\n\t\treturn blockOrder.slice( startIndex, endIndex + 1 );\n\t},\n\t( state ) => [\n\t\tstate.blocks.order,\n\t\tstate.selectionStart.clientId,\n\t\tstate.selectionEnd.clientId,\n\t]\n);\n\n/**\n * Returns the current multi-selection set of block client IDs, or an empty\n * array if there is no multi-selection.\n *\n * @param {Object} state Editor state.\n *\n * @return {Array} Multi-selected block client IDs.\n */\nexport function getMultiSelectedBlockClientIds( state ) {\n\tconst { selectionStart, selectionEnd } = state;\n\n\tif ( selectionStart.clientId === selectionEnd.clientId ) {\n\t\treturn EMPTY_ARRAY;\n\t}\n\n\treturn getSelectedBlockClientIds( state );\n}\n\n/**\n * Returns the current multi-selection set of blocks, or an empty array if\n * there is no multi-selection.\n *\n * @param {Object} state Editor state.\n *\n * @return {Array} Multi-selected block objects.\n */\nexport const getMultiSelectedBlocks = createSelector(\n\t( state ) => {\n\t\tconst multiSelectedBlockClientIds = getMultiSelectedBlockClientIds(\n\t\t\tstate\n\t\t);\n\t\tif ( ! multiSelectedBlockClientIds.length ) {\n\t\t\treturn EMPTY_ARRAY;\n\t\t}\n\n\t\treturn multiSelectedBlockClientIds.map( ( clientId ) =>\n\t\t\tgetBlock( state, clientId )\n\t\t);\n\t},\n\t( state ) => [\n\t\t...getSelectedBlockClientIds.getDependants( state ),\n\t\tstate.blocks.byClientId,\n\t\tstate.blocks.order,\n\t\tstate.blocks.attributes,\n\t]\n);\n\n/**\n * Returns the client ID of the first block in the multi-selection set, or null\n * if there is no multi-selection.\n *\n * @param {Object} state Editor state.\n *\n * @return {?string} First block client ID in the multi-selection set.\n */\nexport function getFirstMultiSelectedBlockClientId( state ) {\n\treturn first( getMultiSelectedBlockClientIds( state ) ) || null;\n}\n\n/**\n * Returns the client ID of the last block in the multi-selection set, or null\n * if there is no multi-selection.\n *\n * @param {Object} state Editor state.\n *\n * @return {?string} Last block client ID in the multi-selection set.\n */\nexport function getLastMultiSelectedBlockClientId( state ) {\n\treturn last( getMultiSelectedBlockClientIds( state ) ) || null;\n}\n\n/**\n * Returns true if a multi-selection exists, and the block corresponding to the\n * specified client ID is the first block of the multi-selection set, or false\n * otherwise.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {boolean} Whether block is first in multi-selection.\n */\nexport function isFirstMultiSelectedBlock( state, clientId ) {\n\treturn getFirstMultiSelectedBlockClientId( state ) === clientId;\n}\n\n/**\n * Returns true if the client ID occurs within the block multi-selection, or\n * false otherwise.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {boolean} Whether block is in multi-selection set.\n */\nexport function isBlockMultiSelected( state, clientId ) {\n\treturn getMultiSelectedBlockClientIds( state ).indexOf( clientId ) !== -1;\n}\n\n/**\n * Returns true if an ancestor of the block is multi-selected, or false\n * otherwise.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {boolean} Whether an ancestor of the block is in multi-selection\n *                   set.\n */\nexport const isAncestorMultiSelected = createSelector(\n\t( state, clientId ) => {\n\t\tlet ancestorClientId = clientId;\n\t\tlet isMultiSelected = false;\n\t\twhile ( ancestorClientId && ! isMultiSelected ) {\n\t\t\tancestorClientId = getBlockRootClientId( state, ancestorClientId );\n\t\t\tisMultiSelected = isBlockMultiSelected( state, ancestorClientId );\n\t\t}\n\t\treturn isMultiSelected;\n\t},\n\t( state ) => [\n\t\tstate.blocks.order,\n\t\tstate.selectionStart.clientId,\n\t\tstate.selectionEnd.clientId,\n\t]\n);\n/**\n * Returns the client ID of the block which begins the multi-selection set, or\n * null if there is no multi-selection.\n *\n * This is not necessarily the first client ID in the selection.\n *\n * @see getFirstMultiSelectedBlockClientId\n *\n * @param {Object} state Editor state.\n *\n * @return {?string} Client ID of block beginning multi-selection.\n */\nexport function getMultiSelectedBlocksStartClientId( state ) {\n\tconst { selectionStart, selectionEnd } = state;\n\n\tif ( selectionStart.clientId === selectionEnd.clientId ) {\n\t\treturn null;\n\t}\n\n\treturn selectionStart.clientId || null;\n}\n\n/**\n * Returns the client ID of the block which ends the multi-selection set, or\n * null if there is no multi-selection.\n *\n * This is not necessarily the last client ID in the selection.\n *\n * @see getLastMultiSelectedBlockClientId\n *\n * @param {Object} state Editor state.\n *\n * @return {?string} Client ID of block ending multi-selection.\n */\nexport function getMultiSelectedBlocksEndClientId( state ) {\n\tconst { selectionStart, selectionEnd } = state;\n\n\tif ( selectionStart.clientId === selectionEnd.clientId ) {\n\t\treturn null;\n\t}\n\n\treturn selectionEnd.clientId || null;\n}\n\n/**\n * Returns an array containing all block client IDs in the editor in the order\n * they appear. Optionally accepts a root client ID of the block list for which\n * the order should be returned, defaulting to the top-level block order.\n *\n * @param {Object}  state        Editor state.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {Array} Ordered client IDs of editor blocks.\n */\nexport function getBlockOrder( state, rootClientId ) {\n\treturn state.blocks.order[ rootClientId || '' ] || EMPTY_ARRAY;\n}\n\n/**\n * Returns the index at which the block corresponding to the specified client\n * ID occurs within the block order, or `-1` if the block does not exist.\n *\n * @param {Object}  state        Editor state.\n * @param {string}  clientId     Block client ID.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {number} Index at which block exists in order.\n */\nexport function getBlockIndex( state, clientId, rootClientId ) {\n\treturn getBlockOrder( state, rootClientId ).indexOf( clientId );\n}\n\n/**\n * Returns true if the block corresponding to the specified client ID is\n * currently selected and no multi-selection exists, or false otherwise.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {boolean} Whether block is selected and multi-selection exists.\n */\nexport function isBlockSelected( state, clientId ) {\n\tconst { selectionStart, selectionEnd } = state;\n\n\tif ( selectionStart.clientId !== selectionEnd.clientId ) {\n\t\treturn false;\n\t}\n\n\treturn selectionStart.clientId === clientId;\n}\n\n/**\n * Returns true if one of the block's inner blocks is selected.\n *\n * @param {Object}  state    Editor state.\n * @param {string}  clientId Block client ID.\n * @param {boolean} deep     Perform a deep check.\n *\n * @return {boolean} Whether the block as an inner block selected\n */\nexport function hasSelectedInnerBlock( state, clientId, deep = false ) {\n\treturn some(\n\t\tgetBlockOrder( state, clientId ),\n\t\t( innerClientId ) =>\n\t\t\tisBlockSelected( state, innerClientId ) ||\n\t\t\tisBlockMultiSelected( state, innerClientId ) ||\n\t\t\t( deep && hasSelectedInnerBlock( state, innerClientId, deep ) )\n\t);\n}\n\n/**\n * Returns true if the block corresponding to the specified client ID is\n * currently selected but isn't the last of the selected blocks. Here \"last\"\n * refers to the block sequence in the document, _not_ the sequence of\n * multi-selection, which is why `state.selectionEnd` isn't used.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {boolean} Whether block is selected and not the last in the\n *                   selection.\n */\nexport function isBlockWithinSelection( state, clientId ) {\n\tif ( ! clientId ) {\n\t\treturn false;\n\t}\n\n\tconst clientIds = getMultiSelectedBlockClientIds( state );\n\tconst index = clientIds.indexOf( clientId );\n\treturn index > -1 && index < clientIds.length - 1;\n}\n\n/**\n * Returns true if a multi-selection has been made, or false otherwise.\n *\n * @param {Object} state Editor state.\n *\n * @return {boolean} Whether multi-selection has been made.\n */\nexport function hasMultiSelection( state ) {\n\tconst { selectionStart, selectionEnd } = state;\n\treturn selectionStart.clientId !== selectionEnd.clientId;\n}\n\n/**\n * Whether in the process of multi-selecting or not. This flag is only true\n * while the multi-selection is being selected (by mouse move), and is false\n * once the multi-selection has been settled.\n *\n * @see hasMultiSelection\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} True if multi-selecting, false if not.\n */\nexport function isMultiSelecting( state ) {\n\treturn state.isMultiSelecting;\n}\n\n/**\n * Selector that returns if multi-selection is enabled or not.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} True if it should be possible to multi-select blocks, false if multi-selection is disabled.\n */\nexport function isSelectionEnabled( state ) {\n\treturn state.isSelectionEnabled;\n}\n\n/**\n * Returns the block's editing mode, defaulting to \"visual\" if not explicitly\n * assigned.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {Object} Block editing mode.\n */\nexport function getBlockMode( state, clientId ) {\n\treturn state.blocksMode[ clientId ] || 'visual';\n}\n\n/**\n * Returns true if the user is typing, or false otherwise.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether user is typing.\n */\nexport function isTyping( state ) {\n\treturn state.isTyping;\n}\n\n/**\n * Returns true if the user is dragging blocks, or false otherwise.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether user is dragging blocks.\n */\nexport function isDraggingBlocks( state ) {\n\treturn !! state.draggedBlocks.length;\n}\n\n/**\n * Returns the client ids of any blocks being directly dragged.\n *\n * This does not include children of a parent being dragged.\n *\n * @param {Object} state Global application state.\n *\n * @return {string[]} Array of dragged block client ids.\n */\nexport function getDraggedBlockClientIds( state ) {\n\treturn state.draggedBlocks;\n}\n\n/**\n * Returns whether the block is being dragged.\n *\n * Only returns true if the block is being directly dragged,\n * not if the block is a child of a parent being dragged.\n * See `isAncestorBeingDragged` for child blocks.\n *\n * @param {Object} state    Global application state.\n * @param {string} clientId Client id for block to check.\n *\n * @return {boolean} Whether the block is being dragged.\n */\nexport function isBlockBeingDragged( state, clientId ) {\n\treturn state.draggedBlocks.includes( clientId );\n}\n\n/**\n * Returns whether a parent/ancestor of the block is being dragged.\n *\n * @param {Object} state    Global application state.\n * @param {string} clientId Client id for block to check.\n *\n * @return {boolean} Whether the block's ancestor is being dragged.\n */\nexport function isAncestorBeingDragged( state, clientId ) {\n\t// Return early if no blocks are being dragged rather than\n\t// the more expensive check for parents.\n\tif ( ! isDraggingBlocks( state ) ) {\n\t\treturn false;\n\t}\n\n\tconst parents = getBlockParents( state, clientId );\n\treturn some( parents, ( parentClientId ) =>\n\t\tisBlockBeingDragged( state, parentClientId )\n\t);\n}\n\n/**\n * Returns true if the caret is within formatted text, or false otherwise.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether the caret is within formatted text.\n */\nexport function isCaretWithinFormattedText( state ) {\n\treturn state.isCaretWithinFormattedText;\n}\n\n/**\n * Returns the insertion point, the index at which the new inserted block would\n * be placed. Defaults to the last index.\n *\n * @param {Object} state Editor state.\n *\n * @return {Object} Insertion point object with `rootClientId`, `index`.\n */\nexport function getBlockInsertionPoint( state ) {\n\tlet rootClientId, index;\n\n\tconst { insertionPoint, selectionEnd } = state;\n\tif ( insertionPoint !== null ) {\n\t\treturn insertionPoint;\n\t}\n\n\tconst { clientId } = selectionEnd;\n\n\tif ( clientId ) {\n\t\trootClientId = getBlockRootClientId( state, clientId ) || undefined;\n\t\tindex = getBlockIndex( state, selectionEnd.clientId, rootClientId ) + 1;\n\t} else {\n\t\tindex = getBlockOrder( state ).length;\n\t}\n\n\treturn { rootClientId, index };\n}\n\n/**\n * Returns true if we should show the block insertion point.\n *\n * @param {Object} state Global application state.\n *\n * @return {?boolean} Whether the insertion point is visible or not.\n */\nexport function isBlockInsertionPointVisible( state ) {\n\treturn state.insertionPoint !== null;\n}\n\n/**\n * Returns whether the blocks matches the template or not.\n *\n * @param {boolean} state\n * @return {?boolean} Whether the template is valid or not.\n */\nexport function isValidTemplate( state ) {\n\treturn state.template.isValid;\n}\n\n/**\n * Returns the defined block template\n *\n * @param {boolean} state\n * @return {?Array}        Block Template\n */\nexport function getTemplate( state ) {\n\treturn state.settings.template;\n}\n\n/**\n * Returns the defined block template lock. Optionally accepts a root block\n * client ID as context, otherwise defaulting to the global context.\n *\n * @param {Object}  state        Editor state.\n * @param {?string} rootClientId Optional block root client ID.\n *\n * @return {?string} Block Template Lock\n */\nexport function getTemplateLock( state, rootClientId ) {\n\tif ( ! rootClientId ) {\n\t\treturn state.settings.templateLock;\n\t}\n\n\tconst blockListSettings = getBlockListSettings( state, rootClientId );\n\tif ( ! blockListSettings ) {\n\t\treturn null;\n\t}\n\n\treturn blockListSettings.templateLock;\n}\n\n/**\n * Determines if the given block type is allowed to be inserted into the block list.\n * This function is not exported and not memoized because using a memoized selector\n * inside another memoized selector is just a waste of time.\n *\n * @param {Object}  state        Editor state.\n * @param {string}  blockName    The name of the block type, e.g.' core/paragraph'.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {boolean} Whether the given block type is allowed to be inserted.\n */\nconst canInsertBlockTypeUnmemoized = (\n\tstate,\n\tblockName,\n\trootClientId = null\n) => {\n\tconst checkAllowList = ( list, item, defaultResult = null ) => {\n\t\tif ( isBoolean( list ) ) {\n\t\t\treturn list;\n\t\t}\n\t\tif ( isArray( list ) ) {\n\t\t\t// TODO: when there is a canonical way to detect that we are editing a post\n\t\t\t// the following check should be changed to something like:\n\t\t\t// if ( list.includes( 'core/post-content' ) && getEditorMode() === 'post-content' && item === null )\n\t\t\tif ( list.includes( 'core/post-content' ) && item === null ) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn list.includes( item );\n\t\t}\n\t\treturn defaultResult;\n\t};\n\n\tconst blockType = getBlockType( blockName );\n\tif ( ! blockType ) {\n\t\treturn false;\n\t}\n\n\tconst { allowedBlockTypes } = getSettings( state );\n\n\tconst isBlockAllowedInEditor = checkAllowList(\n\t\tallowedBlockTypes,\n\t\tblockName,\n\t\ttrue\n\t);\n\tif ( ! isBlockAllowedInEditor ) {\n\t\treturn false;\n\t}\n\n\tconst isLocked = !! getTemplateLock( state, rootClientId );\n\tif ( isLocked ) {\n\t\treturn false;\n\t}\n\n\tconst parentBlockListSettings = getBlockListSettings( state, rootClientId );\n\n\t// The parent block doesn't have settings indicating it doesn't support\n\t// inner blocks, return false.\n\tif ( rootClientId && parentBlockListSettings === undefined ) {\n\t\treturn false;\n\t}\n\n\tconst parentAllowedBlocks = parentBlockListSettings?.allowedBlocks;\n\tconst hasParentAllowedBlock = checkAllowList(\n\t\tparentAllowedBlocks,\n\t\tblockName\n\t);\n\n\tconst blockAllowedParentBlocks = blockType.parent;\n\tconst parentName = getBlockName( state, rootClientId );\n\tconst hasBlockAllowedParent = checkAllowList(\n\t\tblockAllowedParentBlocks,\n\t\tparentName\n\t);\n\n\tif ( hasParentAllowedBlock !== null && hasBlockAllowedParent !== null ) {\n\t\treturn hasParentAllowedBlock || hasBlockAllowedParent;\n\t} else if ( hasParentAllowedBlock !== null ) {\n\t\treturn hasParentAllowedBlock;\n\t} else if ( hasBlockAllowedParent !== null ) {\n\t\treturn hasBlockAllowedParent;\n\t}\n\n\treturn true;\n};\n\n/**\n * Determines if the given block type is allowed to be inserted into the block list.\n *\n * @param {Object}  state        Editor state.\n * @param {string}  blockName    The name of the block type, e.g.' core/paragraph'.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {boolean} Whether the given block type is allowed to be inserted.\n */\nexport const canInsertBlockType = createSelector(\n\tcanInsertBlockTypeUnmemoized,\n\t( state, blockName, rootClientId ) => [\n\t\tstate.blockListSettings[ rootClientId ],\n\t\tstate.blocks.byClientId[ rootClientId ],\n\t\tstate.settings.allowedBlockTypes,\n\t\tstate.settings.templateLock,\n\t]\n);\n\n/**\n * Determines if the given blocks are allowed to be inserted into the block\n * list.\n *\n * @param {Object}  state        Editor state.\n * @param {string}  clientIds    The block client IDs to be inserted.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {boolean} Whether the given blocks are allowed to be inserted.\n */\nexport function canInsertBlocks( state, clientIds, rootClientId = null ) {\n\treturn clientIds.every( ( id ) =>\n\t\tcanInsertBlockType( state, getBlockName( state, id ), rootClientId )\n\t);\n}\n\n/**\n * Returns information about how recently and frequently a block has been inserted.\n *\n * @param {Object} state Global application state.\n * @param {string} id    A string which identifies the insert, e.g. 'core/block/12'\n *\n * @return {?{ time: number, count: number }} An object containing `time` which is when the last\n *                                            insert occurred as a UNIX epoch, and `count` which is\n *                                            the number of inserts that have occurred.\n */\nfunction getInsertUsage( state, id ) {\n\treturn state.preferences.insertUsage?.[ id ] ?? null;\n}\n\n/**\n * Returns whether we can show a block type in the inserter\n *\n * @param {Object} state Global State\n * @param {Object} blockType BlockType\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {boolean} Whether the given block type is allowed to be shown in the inserter.\n */\nconst canIncludeBlockTypeInInserter = ( state, blockType, rootClientId ) => {\n\tif ( ! hasBlockSupport( blockType, 'inserter', true ) ) {\n\t\treturn false;\n\t}\n\n\treturn canInsertBlockTypeUnmemoized( state, blockType.name, rootClientId );\n};\n\n/**\n * Return a function to be used to tranform a block variation to an inserter item\n *\n * @param {Object} item Denormalized inserter item\n * @return {Function} Function to transform a block variation to inserter item\n */\nconst getItemFromVariation = ( item ) => ( variation ) => ( {\n\t...item,\n\tid: `${ item.id }-${ variation.name }`,\n\ticon: variation.icon || item.icon,\n\ttitle: variation.title || item.title,\n\tdescription: variation.description || item.description,\n\t// If `example` is explicitly undefined for the variation, the preview will not be shown.\n\texample: variation.hasOwnProperty( 'example' )\n\t\t? variation.example\n\t\t: item.example,\n\tinitialAttributes: {\n\t\t...item.initialAttributes,\n\t\t...variation.attributes,\n\t},\n\tinnerBlocks: variation.innerBlocks,\n\tkeywords: variation.keywords || item.keywords,\n} );\n\n/**\n * Determines the items that appear in the inserter. Includes both static\n * items (e.g. a regular block type) and dynamic items (e.g. a reusable block).\n *\n * Each item object contains what's necessary to display a button in the\n * inserter and handle its selection.\n *\n * The 'frecency' property is a heuristic (https://en.wikipedia.org/wiki/Frecency)\n * that combines block usage frequenty and recency.\n *\n * Items are returned ordered descendingly by their 'utility' and 'frecency'.\n *\n * @param {Object}  state        Editor state.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {WPEditorInserterItem[]} Items that appear in inserter.\n *\n * @typedef {Object} WPEditorInserterItem\n * @property {string}   id                Unique identifier for the item.\n * @property {string}   name              The type of block to create.\n * @property {Object}   initialAttributes Attributes to pass to the newly created block.\n * @property {string}   title             Title of the item, as it appears in the inserter.\n * @property {string}   icon              Dashicon for the item, as it appears in the inserter.\n * @property {string}   category          Block category that the item is associated with.\n * @property {string[]} keywords          Keywords that can be searched to find this item.\n * @property {boolean}  isDisabled        Whether or not the user should be prevented from inserting\n *                                        this item.\n * @property {number}   frecency          Heuristic that combines frequency and recency.\n */\nexport const getInserterItems = createSelector(\n\t( state, rootClientId = null ) => {\n\t\tconst calculateFrecency = ( time, count ) => {\n\t\t\tif ( ! time ) {\n\t\t\t\treturn count;\n\t\t\t}\n\n\t\t\t// The selector is cached, which means Date.now() is the last time that the\n\t\t\t// relevant state changed. This suits our needs.\n\t\t\tconst duration = Date.now() - time;\n\n\t\t\tswitch ( true ) {\n\t\t\t\tcase duration < MILLISECONDS_PER_HOUR:\n\t\t\t\t\treturn count * 4;\n\t\t\t\tcase duration < MILLISECONDS_PER_DAY:\n\t\t\t\t\treturn count * 2;\n\t\t\t\tcase duration < MILLISECONDS_PER_WEEK:\n\t\t\t\t\treturn count / 2;\n\t\t\t\tdefault:\n\t\t\t\t\treturn count / 4;\n\t\t\t}\n\t\t};\n\n\t\tconst buildBlockTypeInserterItem = ( blockType ) => {\n\t\t\tconst id = blockType.name;\n\n\t\t\tlet isDisabled = false;\n\t\t\tif ( ! hasBlockSupport( blockType.name, 'multiple', true ) ) {\n\t\t\t\tisDisabled = some(\n\t\t\t\t\tgetBlocksByClientId(\n\t\t\t\t\t\tstate,\n\t\t\t\t\t\tgetClientIdsWithDescendants( state )\n\t\t\t\t\t),\n\t\t\t\t\t{\n\t\t\t\t\t\tname: blockType.name,\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tconst { time, count = 0 } = getInsertUsage( state, id ) || {};\n\t\t\tconst inserterVariations = blockType.variations.filter(\n\t\t\t\t( { scope } ) => ! scope || scope.includes( 'inserter' )\n\t\t\t);\n\n\t\t\treturn {\n\t\t\t\tid,\n\t\t\t\tname: blockType.name,\n\t\t\t\tinitialAttributes: {},\n\t\t\t\ttitle: blockType.title,\n\t\t\t\tdescription: blockType.description,\n\t\t\t\ticon: blockType.icon,\n\t\t\t\tcategory: blockType.category,\n\t\t\t\tkeywords: blockType.keywords,\n\t\t\t\tvariations: inserterVariations,\n\t\t\t\texample: blockType.example,\n\t\t\t\tisDisabled,\n\t\t\t\tutility: 1, // deprecated\n\t\t\t\tfrecency: calculateFrecency( time, count ),\n\t\t\t};\n\t\t};\n\n\t\tconst buildReusableBlockInserterItem = ( reusableBlock ) => {\n\t\t\tconst id = `core/block/${ reusableBlock.id }`;\n\n\t\t\tconst referencedBlocks = __experimentalGetParsedReusableBlock(\n\t\t\t\tstate,\n\t\t\t\treusableBlock.id\n\t\t\t);\n\t\t\tlet referencedBlockType;\n\t\t\tif ( referencedBlocks.length === 1 ) {\n\t\t\t\treferencedBlockType = getBlockType(\n\t\t\t\t\treferencedBlocks[ 0 ].name\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tconst { time, count = 0 } = getInsertUsage( state, id ) || {};\n\t\t\tconst frecency = calculateFrecency( time, count );\n\n\t\t\treturn {\n\t\t\t\tid,\n\t\t\t\tname: 'core/block',\n\t\t\t\tinitialAttributes: { ref: reusableBlock.id },\n\t\t\t\ttitle: reusableBlock.title.raw,\n\t\t\t\ticon: referencedBlockType\n\t\t\t\t\t? referencedBlockType.icon\n\t\t\t\t\t: templateIcon,\n\t\t\t\tcategory: 'reusable',\n\t\t\t\tkeywords: [],\n\t\t\t\tisDisabled: false,\n\t\t\t\tutility: 1, // deprecated\n\t\t\t\tfrecency,\n\t\t\t};\n\t\t};\n\n\t\tconst blockTypeInserterItems = getBlockTypes()\n\t\t\t.filter( ( blockType ) =>\n\t\t\t\tcanIncludeBlockTypeInInserter( state, blockType, rootClientId )\n\t\t\t)\n\t\t\t.map( buildBlockTypeInserterItem );\n\n\t\tconst reusableBlockInserterItems = canInsertBlockTypeUnmemoized(\n\t\t\tstate,\n\t\t\t'core/block',\n\t\t\trootClientId\n\t\t)\n\t\t\t? getReusableBlocks( state ).map( buildReusableBlockInserterItem )\n\t\t\t: [];\n\n\t\t// Exclude any block type item that is to be replaced by a default\n\t\t// variation.\n\t\tconst visibleBlockTypeInserterItems = blockTypeInserterItems.filter(\n\t\t\t( { variations = [] } ) =>\n\t\t\t\t! variations.some( ( { isDefault } ) => isDefault )\n\t\t);\n\n\t\tconst blockVariations = [];\n\t\t// Show all available blocks with variations\n\t\tfor ( const item of blockTypeInserterItems ) {\n\t\t\tconst { variations = [] } = item;\n\t\t\tif ( variations.length ) {\n\t\t\t\tconst variationMapper = getItemFromVariation( item );\n\t\t\t\tblockVariations.push( ...variations.map( variationMapper ) );\n\t\t\t}\n\t\t}\n\n\t\treturn [\n\t\t\t...visibleBlockTypeInserterItems,\n\t\t\t...blockVariations,\n\t\t\t...reusableBlockInserterItems,\n\t\t];\n\t},\n\t( state, rootClientId ) => [\n\t\tstate.blockListSettings[ rootClientId ],\n\t\tstate.blocks.byClientId,\n\t\tstate.blocks.order,\n\t\tstate.preferences.insertUsage,\n\t\tstate.settings.allowedBlockTypes,\n\t\tstate.settings.templateLock,\n\t\tgetReusableBlocks( state ),\n\t\tgetBlockTypes(),\n\t]\n);\n\n/**\n * Determines whether there are items to show in the inserter.\n *\n * @param {Object}  state        Editor state.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {boolean} Items that appear in inserter.\n */\nexport const hasInserterItems = createSelector(\n\t( state, rootClientId = null ) => {\n\t\tconst hasBlockType = some( getBlockTypes(), ( blockType ) =>\n\t\t\tcanIncludeBlockTypeInInserter( state, blockType, rootClientId )\n\t\t);\n\t\tif ( hasBlockType ) {\n\t\t\treturn true;\n\t\t}\n\t\tconst hasReusableBlock =\n\t\t\tcanInsertBlockTypeUnmemoized( state, 'core/block', rootClientId ) &&\n\t\t\tgetReusableBlocks( state ).length > 0;\n\n\t\treturn hasReusableBlock;\n\t},\n\t( state, rootClientId ) => [\n\t\tstate.blockListSettings[ rootClientId ],\n\t\tstate.blocks.byClientId,\n\t\tstate.settings.allowedBlockTypes,\n\t\tstate.settings.templateLock,\n\t\tgetReusableBlocks( state ),\n\t\tgetBlockTypes(),\n\t]\n);\n\n/**\n * Returns the list of allowed inserter blocks for inner blocks children\n *\n * @param {Object}  state        Editor state.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {Array?} The list of allowed block types.\n */\nexport const __experimentalGetAllowedBlocks = createSelector(\n\t( state, rootClientId = null ) => {\n\t\tif ( ! rootClientId ) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn filter( getBlockTypes(), ( blockType ) =>\n\t\t\tcanIncludeBlockTypeInInserter( state, blockType, rootClientId )\n\t\t);\n\t},\n\t( state, rootClientId ) => [\n\t\tstate.blockListSettings[ rootClientId ],\n\t\tstate.blocks.byClientId,\n\t\tstate.settings.allowedBlockTypes,\n\t\tstate.settings.templateLock,\n\t\tgetBlockTypes(),\n\t]\n);\n\n/**\n * Returns the Block List settings of a block, if any exist.\n *\n * @param {Object}  state    Editor state.\n * @param {?string} clientId Block client ID.\n *\n * @return {?Object} Block settings of the block if set.\n */\nexport function getBlockListSettings( state, clientId ) {\n\treturn state.blockListSettings[ clientId ];\n}\n\n/**\n * Returns the editor settings.\n *\n * @param {Object} state Editor state.\n *\n * @return {Object} The editor settings object.\n */\nexport function getSettings( state ) {\n\treturn state.settings;\n}\n\n/**\n * Returns true if the most recent block change is be considered persistent, or\n * false otherwise. A persistent change is one committed by BlockEditorProvider\n * via its `onChange` callback, in addition to `onInput`.\n *\n * @param {Object} state Block editor state.\n *\n * @return {boolean} Whether the most recent block change was persistent.\n */\nexport function isLastBlockChangePersistent( state ) {\n\treturn state.blocks.isPersistentChange;\n}\n\n/**\n * Returns the Block List settings for an array of blocks, if any exist.\n *\n * @param {Object}  state    Editor state.\n * @param {Array} clientIds Block client IDs.\n *\n * @return {Array} Block List Settings for each of the found blocks\n */\nexport const __experimentalGetBlockListSettingsForBlocks = createSelector(\n\t( state, clientIds ) => {\n\t\treturn filter( state.blockListSettings, ( value, key ) =>\n\t\t\tclientIds.includes( key )\n\t\t);\n\t},\n\t( state ) => [ state.blockListSettings ]\n);\n\n/**\n * Returns the parsed block saved as shared block with the given ID.\n *\n * @param {Object}        state Global application state.\n * @param {number|string} ref   The shared block's ID.\n *\n * @return {Object} The parsed block.\n */\nexport const __experimentalGetParsedReusableBlock = createSelector(\n\t( state, ref ) => {\n\t\tconst reusableBlock = find(\n\t\t\tgetReusableBlocks( state ),\n\t\t\t( block ) => block.id === ref\n\t\t);\n\t\tif ( ! reusableBlock ) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// Only reusableBlock.content.raw should be used here, `reusableBlock.content` is a\n\t\t// workaround until #22127 is fixed.\n\t\treturn parse(\n\t\t\ttypeof reusableBlock.content.raw === 'string'\n\t\t\t\t? reusableBlock.content.raw\n\t\t\t\t: reusableBlock.content\n\t\t);\n\t},\n\t( state ) => [ getReusableBlocks( state ) ]\n);\n\n/**\n * Returns true if the most recent block change is be considered ignored, or\n * false otherwise. An ignored change is one not to be committed by\n * BlockEditorProvider, neither via `onChange` nor `onInput`.\n *\n * @param {Object} state Block editor state.\n *\n * @return {boolean} Whether the most recent block change was ignored.\n */\nexport function __unstableIsLastBlockChangeIgnored( state ) {\n\t// TODO: Removal Plan: Changes incurred by RECEIVE_BLOCKS should not be\n\t// ignored if in-fact they result in a change in blocks state. The current\n\t// need to ignore changes not a result of user interaction should be\n\t// accounted for in the refactoring of reusable blocks as occurring within\n\t// their own separate block editor / state (#7119).\n\treturn state.blocks.isIgnoredChange;\n}\n\n/**\n * Returns the block attributes changed as a result of the last dispatched\n * action.\n *\n * @param {Object} state Block editor state.\n *\n * @return {Object<string,Object>} Subsets of block attributes changed, keyed\n *                                 by block client ID.\n */\nexport function __experimentalGetLastBlockAttributeChanges( state ) {\n\treturn state.lastBlockAttributesChange;\n}\n\n/**\n * Returns the available reusable blocks\n *\n * @param {Object} state Global application state.\n *\n * @return {Array} Reusable blocks\n */\nfunction getReusableBlocks( state ) {\n\treturn state?.settings?.__experimentalReusableBlocks ?? EMPTY_ARRAY;\n}\n\n/**\n * Returns whether the navigation mode is enabled.\n *\n * @param {Object} state Editor state.\n *\n * @return {boolean}     Is navigation mode enabled.\n */\nexport function isNavigationMode( state ) {\n\treturn state.isNavigationMode;\n}\n\n/**\n * Returns whether block moving mode is enabled.\n *\n * @param {Object} state Editor state.\n *\n * @return {string}     Client Id of moving block.\n */\nexport function hasBlockMovingClientId( state ) {\n\treturn state.hasBlockMovingClientId;\n}\n\n/**\n * Returns true if the last change was an automatic change, false otherwise.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether the last change was automatic.\n */\nexport function didAutomaticChange( state ) {\n\treturn !! state.automaticChangeStatus;\n}\n\n/**\n * Returns true if the current highlighted block matches the block clientId.\n *\n * @param {Object} state Global application state.\n * @param {string} clientId The block to check.\n *\n * @return {boolean} Whether the block is currently highlighted.\n */\nexport function isBlockHighlighted( state, clientId ) {\n\treturn state.highlightedBlock === clientId;\n}\n\n/**\n * Checks if a given block has controlled inner blocks.\n *\n * @param {Object} state Global application state.\n * @param {string} clientId The block to check.\n *\n * @return {boolean} True if the block has controlled inner blocks.\n */\nexport function areInnerBlocksControlled( state, clientId ) {\n\treturn !! state.blocks.controlledInnerBlocks[ clientId ];\n}\n\n/**\n * Returns the clientId for the first 'active' block of a given array of block names.\n * A block is 'active' if it (or a child) is the selected block.\n * Returns the first match moving up the DOM from the selected block.\n *\n * @param {Object} state Global application state.\n * @param {string[]} validBlocksNames The names of block types to check for.\n *\n * @return {string} The matching block's clientId.\n */\nexport const __experimentalGetActiveBlockIdByBlockNames = createSelector(\n\t( state, validBlockNames ) => {\n\t\tif ( ! validBlockNames.length ) {\n\t\t\treturn null;\n\t\t}\n\t\t// Check if selected block is a valid entity area.\n\t\tconst selectedBlockClientId = getSelectedBlockClientId( state );\n\t\tif (\n\t\t\tvalidBlockNames.includes(\n\t\t\t\tgetBlockName( state, selectedBlockClientId )\n\t\t\t)\n\t\t) {\n\t\t\treturn selectedBlockClientId;\n\t\t}\n\t\t// Check if first selected block is a child of a valid entity area.\n\t\tconst multiSelectedBlockClientIds = getMultiSelectedBlockClientIds(\n\t\t\tstate\n\t\t);\n\t\tconst entityAreaParents = getBlockParentsByBlockName(\n\t\t\tstate,\n\t\t\tselectedBlockClientId || multiSelectedBlockClientIds[ 0 ],\n\t\t\tvalidBlockNames\n\t\t);\n\t\tif ( entityAreaParents ) {\n\t\t\t// Last parent closest/most interior.\n\t\t\treturn last( entityAreaParents );\n\t\t}\n\t\treturn null;\n\t},\n\t( state, validBlockNames ) => [\n\t\tstate.selectionStart.clientId,\n\t\tstate.selectionEnd.clientId,\n\t\tvalidBlockNames,\n\t]\n);\n"]}