import { createElement, Fragment } from "@wordpress/element";

/**
 * WordPress dependencies
 */
import { useViewportMatch } from '@wordpress/compose';
import { useSelect, useDispatch } from '@wordpress/data';
import { __, _x } from '@wordpress/i18n';
import { BlockToolbar, NavigableToolbar, BlockNavigationDropdown, ToolSelector } from '@wordpress/block-editor';
import { TableOfContents, EditorHistoryRedo, EditorHistoryUndo } from '@wordpress/editor';
import { Button, DropdownMenu, ToolbarItem, MenuItemsChoice, MenuGroup } from '@wordpress/components';
import { plus } from '@wordpress/icons';
import { useRef } from '@wordpress/element';

function HeaderToolbar() {
  var inserterButton = useRef();

  var _useDispatch = useDispatch('core/edit-post'),
      setIsInserterOpened = _useDispatch.setIsInserterOpened;

  var _useSelect = useSelect(function (select) {
    var _select = select('core/block-editor'),
        hasInserterItems = _select.hasInserterItems,
        getBlockRootClientId = _select.getBlockRootClientId,
        getBlockSelectionEnd = _select.getBlockSelectionEnd;

    return {
      hasFixedToolbar: select('core/edit-post').isFeatureActive('fixedToolbar'),
      // This setting (richEditingEnabled) should not live in the block editor's setting.
      isInserterEnabled: select('core/edit-post').getEditorMode() === 'visual' && select('core/editor').getEditorSettings().richEditingEnabled && hasInserterItems(getBlockRootClientId(getBlockSelectionEnd())),
      isInserterOpened: select('core/edit-post').isInserterOpened(),
      isTextModeEnabled: select('core/edit-post').getEditorMode() === 'text',
      previewDeviceType: select('core/edit-post').__experimentalGetPreviewDeviceType(),
      showIconLabels: select('core/edit-post').isFeatureActive('showIconLabels'),
      isNavigationTool: select('core/block-editor').isNavigationMode(),
      hasReducedUI: select('core/edit-post').isFeatureActive('reducedUI')
    };
  }, []),
      hasReducedUI = _useSelect.hasReducedUI,
      hasFixedToolbar = _useSelect.hasFixedToolbar,
      isInserterEnabled = _useSelect.isInserterEnabled,
      isInserterOpened = _useSelect.isInserterOpened,
      isTextModeEnabled = _useSelect.isTextModeEnabled,
      previewDeviceType = _useSelect.previewDeviceType,
      showIconLabels = _useSelect.showIconLabels,
      isNavigationTool = _useSelect.isNavigationTool;

  var isLargeViewport = useViewportMatch('medium');
  var isWideViewport = useViewportMatch('wide');
  var isSmallViewport = useViewportMatch('small', '<');

  var _useDispatch2 = useDispatch('core/block-editor'),
      setNavigationMode = _useDispatch2.setNavigationMode;

  var displayBlockToolbar = !isLargeViewport || previewDeviceType !== 'Desktop' || hasFixedToolbar;
  var toolbarAriaLabel = displayBlockToolbar ?
  /* translators: accessibility text for the editor toolbar when Top Toolbar is on */
  __('Document and block tools') :
  /* translators: accessibility text for the editor toolbar when Top Toolbar is off */
  __('Document tools');

  var onSwitchMode = function onSwitchMode(mode) {
    setNavigationMode(mode === 'edit' ? false : true);
  };

  var overflowItems = createElement(Fragment, null, createElement(ToolbarItem, {
    as: TableOfContents,
    hasOutlineItemsDisabled: isTextModeEnabled,
    repositionDropdown: showIconLabels && !isWideViewport,
    showTooltip: !showIconLabels,
    isTertiary: showIconLabels
  }), createElement(ToolbarItem, {
    as: BlockNavigationDropdown,
    isDisabled: isTextModeEnabled,
    showTooltip: !showIconLabels,
    isTertiary: showIconLabels
  }));
  return createElement(NavigableToolbar, {
    className: "edit-post-header-toolbar",
    "aria-label": toolbarAriaLabel
  }, createElement("div", {
    className: "edit-post-header-toolbar__left"
  }, createElement(ToolbarItem, {
    ref: inserterButton,
    as: Button,
    className: "edit-post-header-toolbar__inserter-toggle",
    isPrimary: true,
    isPressed: isInserterOpened,
    onMouseDown: function onMouseDown(event) {
      event.preventDefault();
    },
    onClick: function onClick() {
      if (isInserterOpened) {
        // Focusing the inserter button closes the inserter popover
        inserterButton.current.focus();
      } else {
        setIsInserterOpened(true);
      }
    },
    disabled: !isInserterEnabled,
    icon: plus
    /* translators: button label text should, if possible, be under 16
    characters. */
    ,
    label: _x('Add block', 'Generic label for block inserter button'),
    showTooltip: !showIconLabels
  }, showIconLabels && __('Add')), !hasReducedUI && (isWideViewport || !showIconLabels) && createElement(Fragment, null, isLargeViewport && createElement(ToolbarItem, {
    as: ToolSelector,
    showTooltip: !showIconLabels,
    isTertiary: showIconLabels,
    disabled: isTextModeEnabled
  }), createElement(ToolbarItem, {
    as: EditorHistoryUndo,
    showTooltip: !showIconLabels,
    isTertiary: showIconLabels
  }), createElement(ToolbarItem, {
    as: EditorHistoryRedo,
    showTooltip: !showIconLabels,
    isTertiary: showIconLabels
  }), overflowItems), !hasReducedUI && !isWideViewport && !isSmallViewport && showIconLabels && createElement(DropdownMenu, {
    position: "bottom right",
    label:
    /* translators: button label text should, if possible, be under 16
    characters. */
    __('Tools')
  }, function () {
    return createElement("div", {
      className: "edit-post-header__dropdown"
    }, createElement(MenuGroup, {
      label: __('Modes')
    }, createElement(MenuItemsChoice, {
      value: isNavigationTool ? 'select' : 'edit',
      onSelect: onSwitchMode,
      choices: [{
        value: 'edit',
        label: __('Edit')
      }, {
        value: 'select',
        label: __('Select')
      }]
    })), createElement(MenuGroup, {
      label: __('Edit')
    }, createElement(EditorHistoryUndo, {
      showTooltip: !showIconLabels,
      isTertiary: showIconLabels
    }), createElement(EditorHistoryRedo, {
      showTooltip: !showIconLabels,
      isTertiary: showIconLabels
    })), createElement(MenuGroup, null, overflowItems));
  })), displayBlockToolbar && createElement("div", {
    className: "edit-post-header-toolbar__block-toolbar"
  }, createElement(BlockToolbar, {
    hideDragHandle: true
  })));
}

export default HeaderToolbar;
//# sourceMappingURL=index.js.map