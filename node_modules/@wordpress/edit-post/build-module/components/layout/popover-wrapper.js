import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import { createElement } from "@wordpress/element";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

/**
 * WordPress dependencies
 */
import { withConstrainedTabbing, withFocusReturn, withFocusOutside } from '@wordpress/components';
import { Component } from '@wordpress/element';
import { ESCAPE } from '@wordpress/keycodes';

function stopPropagation(event) {
  event.stopPropagation();
}

var DetectOutside = withFocusOutside( /*#__PURE__*/function (_Component) {
  _inherits(_class, _Component);

  var _super = _createSuper(_class);

  function _class() {
    _classCallCheck(this, _class);

    return _super.apply(this, arguments);
  }

  _createClass(_class, [{
    key: "handleFocusOutside",
    value: function handleFocusOutside(event) {
      this.props.onFocusOutside(event);
    }
  }, {
    key: "render",
    value: function render() {
      return this.props.children;
    }
  }]);

  return _class;
}(Component));
var FocusManaged = withConstrainedTabbing(withFocusReturn(function (_ref) {
  var children = _ref.children;
  return children;
}));
export default function PopoverWrapper(_ref2) {
  var onClose = _ref2.onClose,
      children = _ref2.children,
      className = _ref2.className;

  // Event handlers
  var maybeClose = function maybeClose(event) {
    // Close on escape
    if (event.keyCode === ESCAPE && onClose) {
      event.stopPropagation();
      onClose();
    }
  }; // Disable reason: this stops certain events from propagating outside of the component.
  //   - onMouseDown is disabled as this can cause interactions with other DOM elements

  /* eslint-disable jsx-a11y/no-static-element-interactions */


  return createElement("div", {
    className: className,
    onKeyDown: maybeClose,
    onMouseDown: stopPropagation
  }, createElement(DetectOutside, {
    onFocusOutside: onClose
  }, createElement(FocusManaged, null, children)));
  /* eslint-enable jsx-a11y/no-static-element-interactions */
}
//# sourceMappingURL=popover-wrapper.js.map