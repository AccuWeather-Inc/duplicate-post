import { createElement } from "@wordpress/element";

/**
 * External dependencies
 */
import { get } from 'lodash';
/**
 * WordPress dependencies
 */

import { Modal } from '@wordpress/components';
import { __ } from '@wordpress/i18n';
import { withSelect, withDispatch } from '@wordpress/data';
import { compose } from '@wordpress/compose';
import { PostTaxonomies, PostExcerptCheck, PageAttributesCheck, PostFeaturedImageCheck, PostTypeSupportCheck } from '@wordpress/editor';
/**
 * Internal dependencies
 */

import Section from './section';
import { EnablePluginDocumentSettingPanelOption, EnablePublishSidebarOption, EnablePanelOption, EnableFeature } from './options';
import MetaBoxesSection from './meta-boxes-section';
var MODAL_NAME = 'edit-post/preferences';
export function PreferencesModal(_ref) {
  var isModalActive = _ref.isModalActive,
      isViewable = _ref.isViewable,
      closeModal = _ref.closeModal;

  if (!isModalActive) {
    return null;
  }

  return createElement(Modal, {
    className: "edit-post-preferences-modal",
    title: __('Preferences'),
    closeLabel: __('Close'),
    onRequestClose: closeModal
  }, createElement(Section, {
    title: __('General')
  }, createElement(EnablePublishSidebarOption, {
    help: __('Review settings such as categories and tags.'),
    label: __('Include pre-publish checklist')
  }), createElement(EnableFeature, {
    featureName: "mostUsedBlocks",
    help: __('Places the most frequent blocks in the block library.'),
    label: __('Show most used blocks')
  })), createElement(Section, {
    title: __('Keyboard')
  }, createElement(EnableFeature, {
    featureName: "keepCaretInsideBlock",
    help: __('Aids screen readers by stopping text caret from leaving blocks.'),
    label: __('Contain text cursor inside block')
  })), createElement(Section, {
    title: __('Appearance')
  }, createElement(EnableFeature, {
    featureName: "reducedUI",
    help: __('Compacts options and outlines in the toolbar.'),
    label: __('Reduce the interface')
  }), createElement(EnableFeature, {
    featureName: "focusMode",
    help: __('Highlights the current block and fades other content.'),
    label: __('Spotlight mode')
  }), createElement(EnableFeature, {
    featureName: "showIconLabels",
    help: __('Shows text instead of icons in toolbar.'),
    label: __('Display button labels')
  }), createElement(EnableFeature, {
    featureName: "themeStyles",
    help: __('Make the editor look like your theme.'),
    label: __('Use theme styles')
  })), createElement(Section, {
    title: __('Document settings'),
    description: __('Choose what displays in the panel.')
  }, createElement(EnablePluginDocumentSettingPanelOption.Slot, null), isViewable && createElement(EnablePanelOption, {
    label: __('Permalink'),
    panelName: "post-link"
  }), createElement(PostTaxonomies, {
    taxonomyWrapper: function taxonomyWrapper(content, taxonomy) {
      return createElement(EnablePanelOption, {
        label: get(taxonomy, ['labels', 'menu_name']),
        panelName: "taxonomy-panel-".concat(taxonomy.slug)
      });
    }
  }), createElement(PostFeaturedImageCheck, null, createElement(EnablePanelOption, {
    label: __('Featured image'),
    panelName: "featured-image"
  })), createElement(PostExcerptCheck, null, createElement(EnablePanelOption, {
    label: __('Excerpt'),
    panelName: "post-excerpt"
  })), createElement(PostTypeSupportCheck, {
    supportKeys: ['comments', 'trackbacks']
  }, createElement(EnablePanelOption, {
    label: __('Discussion'),
    panelName: "discussion-panel"
  })), createElement(PageAttributesCheck, null, createElement(EnablePanelOption, {
    label: __('Page attributes'),
    panelName: "page-attributes"
  }))), createElement(MetaBoxesSection, {
    title: __('Additional panels'),
    description: __('Add extra areas to the editor.')
  }));
}
export default compose(withSelect(function (select) {
  var _select = select('core/editor'),
      getEditedPostAttribute = _select.getEditedPostAttribute;

  var _select2 = select('core'),
      getPostType = _select2.getPostType;

  var postType = getPostType(getEditedPostAttribute('type'));
  return {
    isModalActive: select('core/edit-post').isModalActive(MODAL_NAME),
    isViewable: get(postType, ['viewable'], false)
  };
}), withDispatch(function (dispatch) {
  return {
    closeModal: function closeModal() {
      return dispatch('core/edit-post').closeModal();
    }
  };
}))(PreferencesModal);
//# sourceMappingURL=index.js.map