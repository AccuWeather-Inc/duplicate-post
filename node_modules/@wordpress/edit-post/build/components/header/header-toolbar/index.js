"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _element = require("@wordpress/element");

var _compose = require("@wordpress/compose");

var _data = require("@wordpress/data");

var _i18n = require("@wordpress/i18n");

var _blockEditor = require("@wordpress/block-editor");

var _editor = require("@wordpress/editor");

var _components = require("@wordpress/components");

var _icons = require("@wordpress/icons");

/**
 * WordPress dependencies
 */
function HeaderToolbar() {
  var inserterButton = (0, _element.useRef)();

  var _useDispatch = (0, _data.useDispatch)('core/edit-post'),
      setIsInserterOpened = _useDispatch.setIsInserterOpened;

  var _useSelect = (0, _data.useSelect)(function (select) {
    var _select = select('core/block-editor'),
        hasInserterItems = _select.hasInserterItems,
        getBlockRootClientId = _select.getBlockRootClientId,
        getBlockSelectionEnd = _select.getBlockSelectionEnd;

    return {
      hasFixedToolbar: select('core/edit-post').isFeatureActive('fixedToolbar'),
      // This setting (richEditingEnabled) should not live in the block editor's setting.
      isInserterEnabled: select('core/edit-post').getEditorMode() === 'visual' && select('core/editor').getEditorSettings().richEditingEnabled && hasInserterItems(getBlockRootClientId(getBlockSelectionEnd())),
      isInserterOpened: select('core/edit-post').isInserterOpened(),
      isTextModeEnabled: select('core/edit-post').getEditorMode() === 'text',
      previewDeviceType: select('core/edit-post').__experimentalGetPreviewDeviceType(),
      showIconLabels: select('core/edit-post').isFeatureActive('showIconLabels'),
      isNavigationTool: select('core/block-editor').isNavigationMode(),
      hasReducedUI: select('core/edit-post').isFeatureActive('reducedUI')
    };
  }, []),
      hasReducedUI = _useSelect.hasReducedUI,
      hasFixedToolbar = _useSelect.hasFixedToolbar,
      isInserterEnabled = _useSelect.isInserterEnabled,
      isInserterOpened = _useSelect.isInserterOpened,
      isTextModeEnabled = _useSelect.isTextModeEnabled,
      previewDeviceType = _useSelect.previewDeviceType,
      showIconLabels = _useSelect.showIconLabels,
      isNavigationTool = _useSelect.isNavigationTool;

  var isLargeViewport = (0, _compose.useViewportMatch)('medium');
  var isWideViewport = (0, _compose.useViewportMatch)('wide');
  var isSmallViewport = (0, _compose.useViewportMatch)('small', '<');

  var _useDispatch2 = (0, _data.useDispatch)('core/block-editor'),
      setNavigationMode = _useDispatch2.setNavigationMode;

  var displayBlockToolbar = !isLargeViewport || previewDeviceType !== 'Desktop' || hasFixedToolbar;
  var toolbarAriaLabel = displayBlockToolbar ?
  /* translators: accessibility text for the editor toolbar when Top Toolbar is on */
  (0, _i18n.__)('Document and block tools') :
  /* translators: accessibility text for the editor toolbar when Top Toolbar is off */
  (0, _i18n.__)('Document tools');

  var onSwitchMode = function onSwitchMode(mode) {
    setNavigationMode(mode === 'edit' ? false : true);
  };

  var overflowItems = (0, _element.createElement)(_element.Fragment, null, (0, _element.createElement)(_components.ToolbarItem, {
    as: _editor.TableOfContents,
    hasOutlineItemsDisabled: isTextModeEnabled,
    repositionDropdown: showIconLabels && !isWideViewport,
    showTooltip: !showIconLabels,
    isTertiary: showIconLabels
  }), (0, _element.createElement)(_components.ToolbarItem, {
    as: _blockEditor.BlockNavigationDropdown,
    isDisabled: isTextModeEnabled,
    showTooltip: !showIconLabels,
    isTertiary: showIconLabels
  }));
  return (0, _element.createElement)(_blockEditor.NavigableToolbar, {
    className: "edit-post-header-toolbar",
    "aria-label": toolbarAriaLabel
  }, (0, _element.createElement)("div", {
    className: "edit-post-header-toolbar__left"
  }, (0, _element.createElement)(_components.ToolbarItem, {
    ref: inserterButton,
    as: _components.Button,
    className: "edit-post-header-toolbar__inserter-toggle",
    isPrimary: true,
    isPressed: isInserterOpened,
    onMouseDown: function onMouseDown(event) {
      event.preventDefault();
    },
    onClick: function onClick() {
      if (isInserterOpened) {
        // Focusing the inserter button closes the inserter popover
        inserterButton.current.focus();
      } else {
        setIsInserterOpened(true);
      }
    },
    disabled: !isInserterEnabled,
    icon: _icons.plus
    /* translators: button label text should, if possible, be under 16
    characters. */
    ,
    label: (0, _i18n._x)('Add block', 'Generic label for block inserter button'),
    showTooltip: !showIconLabels
  }, showIconLabels && (0, _i18n.__)('Add')), !hasReducedUI && (isWideViewport || !showIconLabels) && (0, _element.createElement)(_element.Fragment, null, isLargeViewport && (0, _element.createElement)(_components.ToolbarItem, {
    as: _blockEditor.ToolSelector,
    showTooltip: !showIconLabels,
    isTertiary: showIconLabels,
    disabled: isTextModeEnabled
  }), (0, _element.createElement)(_components.ToolbarItem, {
    as: _editor.EditorHistoryUndo,
    showTooltip: !showIconLabels,
    isTertiary: showIconLabels
  }), (0, _element.createElement)(_components.ToolbarItem, {
    as: _editor.EditorHistoryRedo,
    showTooltip: !showIconLabels,
    isTertiary: showIconLabels
  }), overflowItems), !hasReducedUI && !isWideViewport && !isSmallViewport && showIconLabels && (0, _element.createElement)(_components.DropdownMenu, {
    position: "bottom right",
    label:
    /* translators: button label text should, if possible, be under 16
    characters. */
    (0, _i18n.__)('Tools')
  }, function () {
    return (0, _element.createElement)("div", {
      className: "edit-post-header__dropdown"
    }, (0, _element.createElement)(_components.MenuGroup, {
      label: (0, _i18n.__)('Modes')
    }, (0, _element.createElement)(_components.MenuItemsChoice, {
      value: isNavigationTool ? 'select' : 'edit',
      onSelect: onSwitchMode,
      choices: [{
        value: 'edit',
        label: (0, _i18n.__)('Edit')
      }, {
        value: 'select',
        label: (0, _i18n.__)('Select')
      }]
    })), (0, _element.createElement)(_components.MenuGroup, {
      label: (0, _i18n.__)('Edit')
    }, (0, _element.createElement)(_editor.EditorHistoryUndo, {
      showTooltip: !showIconLabels,
      isTertiary: showIconLabels
    }), (0, _element.createElement)(_editor.EditorHistoryRedo, {
      showTooltip: !showIconLabels,
      isTertiary: showIconLabels
    })), (0, _element.createElement)(_components.MenuGroup, null, overflowItems));
  })), displayBlockToolbar && (0, _element.createElement)("div", {
    className: "edit-post-header-toolbar__block-toolbar"
  }, (0, _element.createElement)(_blockEditor.BlockToolbar, {
    hideDragHandle: true
  })));
}

var _default = HeaderToolbar;
exports.default = _default;
//# sourceMappingURL=index.js.map