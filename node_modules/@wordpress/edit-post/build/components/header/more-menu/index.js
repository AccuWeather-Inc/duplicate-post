"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _element = require("@wordpress/element");

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _i18n = require("@wordpress/i18n");

var _components = require("@wordpress/components");

var _icons = require("@wordpress/icons");

var _interface = require("@wordpress/interface");

var _compose = require("@wordpress/compose");

var _modeSwitcher = _interopRequireDefault(require("../mode-switcher"));

var _preferencesMenuItem = _interopRequireDefault(require("../preferences-menu-item"));

var _toolsMoreMenuGroup = _interopRequireDefault(require("../tools-more-menu-group"));

var _writingMenu = _interopRequireDefault(require("../writing-menu"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var POPOVER_PROPS = {
  className: 'edit-post-more-menu__content',
  position: 'bottom left'
};
var TOGGLE_PROPS = {
  tooltipPosition: 'bottom'
};

var MoreMenu = function MoreMenu(_ref) {
  var showIconLabels = _ref.showIconLabels;
  var isLargeViewport = (0, _compose.useViewportMatch)('large');
  return (0, _element.createElement)(_components.DropdownMenu, {
    className: "edit-post-more-menu",
    icon: _icons.moreVertical
    /* translators: button label text should, if possible, be under 16 characters. */
    ,
    label: (0, _i18n.__)('Options'),
    popoverProps: POPOVER_PROPS,
    toggleProps: _objectSpread({
      showTooltip: !showIconLabels,
      isTertiary: showIconLabels
    }, TOGGLE_PROPS)
  }, function (_ref2) {
    var onClose = _ref2.onClose;
    return (0, _element.createElement)(_element.Fragment, null, showIconLabels && !isLargeViewport && (0, _element.createElement)(_interface.PinnedItems.Slot, {
      className: showIconLabels && 'show-icon-labels',
      scope: "core/edit-post"
    }), (0, _element.createElement)(_writingMenu.default, null), (0, _element.createElement)(_modeSwitcher.default, null), (0, _element.createElement)(_interface.ActionItem.Slot, {
      name: "core/edit-post/plugin-more-menu",
      label: (0, _i18n.__)('Plugins'),
      as: [_components.MenuGroup, _components.MenuItem],
      fillProps: {
        onClick: onClose
      }
    }), (0, _element.createElement)(_toolsMoreMenuGroup.default.Slot, {
      fillProps: {
        onClose: onClose
      }
    }), (0, _element.createElement)(_components.MenuGroup, null, (0, _element.createElement)(_preferencesMenuItem.default, null)));
  });
};

var _default = MoreMenu;
exports.default = _default;
//# sourceMappingURL=index.js.map