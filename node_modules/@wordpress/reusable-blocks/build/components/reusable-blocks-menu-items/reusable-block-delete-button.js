"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _element = require("@wordpress/element");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _components = require("@wordpress/components");

var _i18n = require("@wordpress/i18n");

var _blocks = require("@wordpress/blocks");

var _data = require("@wordpress/data");

var _blockEditor = require("@wordpress/block-editor");

var _constants = require("../../store/constants");

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
function ReusableBlockDeleteButton(_ref) {
  var clientId = _ref.clientId;

  var _useSelect = (0, _data.useSelect)(function (select) {
    var _select = select('core/block-editor'),
        getBlock = _select.getBlock;

    var _select2 = select('core'),
        canUser = _select2.canUser;

    var blockObj = getBlock(clientId);
    var reusableBlock = blockObj && (0, _blocks.isReusableBlock)(blockObj) ? select('core').getEntityRecord('postType', 'wp_block', blockObj.attributes.ref) : null;
    return {
      block: blockObj,
      isVisible: !!reusableBlock && (reusableBlock.isTemporary || !!canUser('delete', 'blocks', reusableBlock.id)),
      isDisabled: reusableBlock && reusableBlock.isTemporary
    };
  }, [clientId]),
      isVisible = _useSelect.isVisible,
      isDisabled = _useSelect.isDisabled,
      block = _useSelect.block;

  var _useDispatch = (0, _data.useDispatch)(_constants.STORE_KEY),
      deleteReusableBlock = _useDispatch.__experimentalDeleteReusableBlock;

  var _useDispatch2 = (0, _data.useDispatch)('core/notices'),
      createSuccessNotice = _useDispatch2.createSuccessNotice,
      createErrorNotice = _useDispatch2.createErrorNotice;

  var onDelete = (0, _element.useCallback)( /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {
    return _regenerator.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.prev = 0;
            _context.next = 3;
            return deleteReusableBlock(block.attributes.ref);

          case 3:
            createSuccessNotice((0, _i18n.__)('Block deleted.'), {
              type: 'snackbar'
            });
            _context.next = 9;
            break;

          case 6:
            _context.prev = 6;
            _context.t0 = _context["catch"](0);
            createErrorNotice(_context.t0.message, {
              type: 'snackbar'
            });

          case 9:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[0, 6]]);
  })), [block]);

  if (!isVisible) {
    return null;
  }

  return (0, _element.createElement)(_blockEditor.BlockSettingsMenuControls, null, function (_ref3) {
    var onClose = _ref3.onClose;
    return (0, _element.createElement)(_components.MenuItem, {
      disabled: isDisabled,
      onClick: function onClick() {
        // eslint-disable-next-line no-alert
        var hasConfirmed = window.confirm( // eslint-disable-next-line @wordpress/i18n-no-collapsible-whitespace
        (0, _i18n.__)('Are you sure you want to delete this Reusable Block?\n\n' + 'It will be permanently removed from all posts and pages that use it.'));

        if (hasConfirmed) {
          onDelete();
          onClose();
        }
      }
    }, (0, _i18n.__)('Remove from Reusable blocks'));
  });
}

var _default = ReusableBlockDeleteButton;
exports.default = _default;
//# sourceMappingURL=reusable-block-delete-button.js.map