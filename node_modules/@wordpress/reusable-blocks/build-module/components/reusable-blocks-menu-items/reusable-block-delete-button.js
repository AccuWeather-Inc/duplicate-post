import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import { createElement } from "@wordpress/element";

/**
 * WordPress dependencies
 */
import { MenuItem } from '@wordpress/components';
import { __ } from '@wordpress/i18n';
import { isReusableBlock } from '@wordpress/blocks';
import { useSelect, useDispatch } from '@wordpress/data';
import { useCallback } from '@wordpress/element';
import { BlockSettingsMenuControls } from '@wordpress/block-editor';
/**
 * Internal dependencies
 */

import { STORE_KEY } from '../../store/constants';

function ReusableBlockDeleteButton(_ref) {
  var clientId = _ref.clientId;

  var _useSelect = useSelect(function (select) {
    var _select = select('core/block-editor'),
        getBlock = _select.getBlock;

    var _select2 = select('core'),
        canUser = _select2.canUser;

    var blockObj = getBlock(clientId);
    var reusableBlock = blockObj && isReusableBlock(blockObj) ? select('core').getEntityRecord('postType', 'wp_block', blockObj.attributes.ref) : null;
    return {
      block: blockObj,
      isVisible: !!reusableBlock && (reusableBlock.isTemporary || !!canUser('delete', 'blocks', reusableBlock.id)),
      isDisabled: reusableBlock && reusableBlock.isTemporary
    };
  }, [clientId]),
      isVisible = _useSelect.isVisible,
      isDisabled = _useSelect.isDisabled,
      block = _useSelect.block;

  var _useDispatch = useDispatch(STORE_KEY),
      deleteReusableBlock = _useDispatch.__experimentalDeleteReusableBlock;

  var _useDispatch2 = useDispatch('core/notices'),
      createSuccessNotice = _useDispatch2.createSuccessNotice,
      createErrorNotice = _useDispatch2.createErrorNotice;

  var onDelete = useCallback( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.prev = 0;
            _context.next = 3;
            return deleteReusableBlock(block.attributes.ref);

          case 3:
            createSuccessNotice(__('Block deleted.'), {
              type: 'snackbar'
            });
            _context.next = 9;
            break;

          case 6:
            _context.prev = 6;
            _context.t0 = _context["catch"](0);
            createErrorNotice(_context.t0.message, {
              type: 'snackbar'
            });

          case 9:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[0, 6]]);
  })), [block]);

  if (!isVisible) {
    return null;
  }

  return createElement(BlockSettingsMenuControls, null, function (_ref3) {
    var onClose = _ref3.onClose;
    return createElement(MenuItem, {
      disabled: isDisabled,
      onClick: function onClick() {
        // eslint-disable-next-line no-alert
        var hasConfirmed = window.confirm( // eslint-disable-next-line @wordpress/i18n-no-collapsible-whitespace
        __('Are you sure you want to delete this Reusable Block?\n\n' + 'It will be permanently removed from all posts and pages that use it.'));

        if (hasConfirmed) {
          onDelete();
          onClose();
        }
      }
    }, __('Remove from Reusable blocks'));
  });
}

export default ReusableBlockDeleteButton;
//# sourceMappingURL=reusable-block-delete-button.js.map