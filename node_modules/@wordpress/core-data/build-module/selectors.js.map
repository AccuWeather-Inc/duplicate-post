{"version":3,"sources":["@wordpress/core-data/src/selectors.js"],"names":["createSelector","set","map","find","get","filter","compact","defaultTo","createRegistrySelector","deprecated","REDUCER_KEY","getQueriedItems","DEFAULT_ENTITY_KEY","getNormalizedCommaSeparable","isRequestingEmbedPreview","select","state","url","isResolving","getAuthors","alternative","getUserQueryResults","getCurrentUser","currentUser","queryID","queryResults","users","queries","id","byId","getEntitiesByKind","kind","entities","config","getEntity","name","getEntityRecord","key","query","queriedState","data","undefined","itemIsComplete","items","item","_fields","filteredItem","fields","f","length","field","split","value","__experimentalGetEntityRecordNoResolver","getRawEntityRecord","record","Object","keys","reduce","accumulator","_key","hasEntityRecords","Array","isArray","getEntityRecords","__experimentalGetDirtyEntityRecords","dirtyRecords","forEach","primaryKeys","edits","primaryKey","hasEditsForEntityRecord","entity","entityRecord","getEditedEntityRecord","push","title","getTitle","getEntityRecordEdits","recordId","getEntityRecordNonTransientEdits","transientEdits","acc","isSavingEntityRecord","isAutosavingEntityRecord","pending","isAutosave","Boolean","isDeletingEntityRecord","getLastEntitySaveError","getLastEntityDeleteError","getCurrentUndoOffset","undo","offset","getUndoEdit","getRedoEdit","hasUndo","hasRedo","getCurrentTheme","themes","currentTheme","getThemeSupports","themeSupports","getEmbedPreview","embedPreviews","isPreviewEmbedFallback","preview","oEmbedLinkCheck","html","hasUploadPermissions","canUser","action","resource","join","getAutosaves","postType","postId","autosaves","getAutosave","authorId","author","hasFetchedAutosaves","hasFinishedResolution","getReferenceByDistinctEdits","flattenedUndo"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport createSelector from 'rememo';\nimport { set, map, find, get, filter, compact, defaultTo } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { createRegistrySelector } from '@wordpress/data';\nimport deprecated from '@wordpress/deprecated';\n\n/**\n * Internal dependencies\n */\nimport { REDUCER_KEY } from './name';\nimport { getQueriedItems } from './queried-data';\nimport { DEFAULT_ENTITY_KEY } from './entities';\nimport { getNormalizedCommaSeparable } from './utils';\n\n/**\n * Returns true if a request is in progress for embed preview data, or false\n * otherwise.\n *\n * @param {Object} state Data state.\n * @param {string} url   URL the preview would be for.\n *\n * @return {boolean} Whether a request is in progress for an embed preview.\n */\nexport const isRequestingEmbedPreview = createRegistrySelector(\n\t( select ) => ( state, url ) => {\n\t\treturn select( 'core/data' ).isResolving(\n\t\t\tREDUCER_KEY,\n\t\t\t'getEmbedPreview',\n\t\t\t[ url ]\n\t\t);\n\t}\n);\n\n/**\n * Returns all available authors.\n *\n * @param {Object} state Data state.\n *\n * @return {Array} Authors list.\n */\nexport function getAuthors( state ) {\n\tdeprecated( \"select( 'core' ).getAuthors()\", {\n\t\talternative: \"select( 'core' ).getUsers({ who: 'authors' })\",\n\t} );\n\treturn getUserQueryResults( state, 'authors' );\n}\n\n/**\n * Returns the current user.\n *\n * @param {Object} state Data state.\n *\n * @return {Object} Current user object.\n */\nexport function getCurrentUser( state ) {\n\treturn state.currentUser;\n}\n\n/**\n * Returns all the users returned by a query ID.\n *\n * @param {Object} state   Data state.\n * @param {string} queryID Query ID.\n *\n * @return {Array} Users list.\n */\nexport const getUserQueryResults = createSelector(\n\t( state, queryID ) => {\n\t\tconst queryResults = state.users.queries[ queryID ];\n\n\t\treturn map( queryResults, ( id ) => state.users.byId[ id ] );\n\t},\n\t( state, queryID ) => [ state.users.queries[ queryID ], state.users.byId ]\n);\n\n/**\n * Returns whether the entities for the give kind are loaded.\n *\n * @param {Object} state   Data state.\n * @param {string} kind  Entity kind.\n *\n * @return {boolean} Whether the entities are loaded\n */\nexport function getEntitiesByKind( state, kind ) {\n\treturn filter( state.entities.config, { kind } );\n}\n\n/**\n * Returns the entity object given its kind and name.\n *\n * @param {Object} state   Data state.\n * @param {string} kind  Entity kind.\n * @param {string} name  Entity name.\n *\n * @return {Object} Entity\n */\nexport function getEntity( state, kind, name ) {\n\treturn find( state.entities.config, { kind, name } );\n}\n\n/**\n * Returns the Entity's record object by key. Returns `null` if the value is not\n * yet received, undefined if the value entity is known to not exist, or the\n * entity object if it exists and is received.\n *\n * @param {Object}  state State tree\n * @param {string}  kind  Entity kind.\n * @param {string}  name  Entity name.\n * @param {number}  key   Record's key\n * @param {?Object} query Optional query.\n *\n * @return {Object?} Record.\n */\nexport function getEntityRecord( state, kind, name, key, query ) {\n\tconst queriedState = get( state.entities.data, [\n\t\tkind,\n\t\tname,\n\t\t'queriedData',\n\t] );\n\tif ( ! queriedState ) {\n\t\treturn undefined;\n\t}\n\n\tif ( query === undefined ) {\n\t\t// If expecting a complete item, validate that completeness.\n\t\tif ( ! queriedState.itemIsComplete[ key ] ) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn queriedState.items[ key ];\n\t}\n\n\tconst item = queriedState.items[ key ];\n\tif ( item && query._fields ) {\n\t\tconst filteredItem = {};\n\t\tconst fields = getNormalizedCommaSeparable( query._fields );\n\t\tfor ( let f = 0; f < fields.length; f++ ) {\n\t\t\tconst field = fields[ f ].split( '.' );\n\t\t\tconst value = get( item, field );\n\t\t\tset( filteredItem, field, value );\n\t\t}\n\t\treturn filteredItem;\n\t}\n\n\treturn item;\n}\n\n/**\n * Returns the Entity's record object by key. Doesn't trigger a resolver nor requests the entity from the API if the entity record isn't available in the local state.\n *\n * @param {Object} state  State tree\n * @param {string} kind   Entity kind.\n * @param {string} name   Entity name.\n * @param {number} key    Record's key\n *\n * @return {Object|null} Record.\n */\nexport function __experimentalGetEntityRecordNoResolver(\n\tstate,\n\tkind,\n\tname,\n\tkey\n) {\n\treturn getEntityRecord( state, kind, name, key );\n}\n\n/**\n * Returns the entity's record object by key,\n * with its attributes mapped to their raw values.\n *\n * @param {Object} state  State tree.\n * @param {string} kind   Entity kind.\n * @param {string} name   Entity name.\n * @param {number} key    Record's key.\n *\n * @return {Object?} Object with the entity's raw attributes.\n */\nexport const getRawEntityRecord = createSelector(\n\t( state, kind, name, key ) => {\n\t\tconst record = getEntityRecord( state, kind, name, key );\n\t\treturn (\n\t\t\trecord &&\n\t\t\tObject.keys( record ).reduce( ( accumulator, _key ) => {\n\t\t\t\t// Because edits are the \"raw\" attribute values,\n\t\t\t\t// we return those from record selectors to make rendering,\n\t\t\t\t// comparisons, and joins with edits easier.\n\t\t\t\taccumulator[ _key ] = get(\n\t\t\t\t\trecord[ _key ],\n\t\t\t\t\t'raw',\n\t\t\t\t\trecord[ _key ]\n\t\t\t\t);\n\t\t\t\treturn accumulator;\n\t\t\t}, {} )\n\t\t);\n\t},\n\t( state ) => [ state.entities.data ]\n);\n\n/**\n * Returns true if records have been received for the given set of parameters,\n * or false otherwise.\n *\n * @param {Object}  state State tree\n * @param {string}  kind  Entity kind.\n * @param {string}  name  Entity name.\n * @param {?Object} query Optional terms query.\n *\n * @return {boolean} Whether entity records have been received.\n */\nexport function hasEntityRecords( state, kind, name, query ) {\n\treturn Array.isArray( getEntityRecords( state, kind, name, query ) );\n}\n\n/**\n * Returns the Entity's records.\n *\n * @param {Object}  state State tree\n * @param {string}  kind  Entity kind.\n * @param {string}  name  Entity name.\n * @param {?Object} query Optional terms query.\n *\n * @return {?Array} Records.\n */\nexport function getEntityRecords( state, kind, name, query ) {\n\t// Queried data state is prepopulated for all known entities. If this is not\n\t// assigned for the given parameters, then it is known to not exist. Thus, a\n\t// return value of an empty array is used instead of `null` (where `null` is\n\t// otherwise used to represent an unknown state).\n\tconst queriedState = get( state.entities.data, [\n\t\tkind,\n\t\tname,\n\t\t'queriedData',\n\t] );\n\tif ( ! queriedState ) {\n\t\treturn [];\n\t}\n\treturn getQueriedItems( queriedState, query );\n}\n\n/**\n * Returns the  list of dirty entity records.\n *\n * @param {Object} state State tree.\n *\n * @return {[{ title: string, key: string, name: string, kind: string }]} The list of updated records\n */\nexport const __experimentalGetDirtyEntityRecords = createSelector(\n\t( state ) => {\n\t\tconst {\n\t\t\tentities: { data },\n\t\t} = state;\n\t\tconst dirtyRecords = [];\n\t\tObject.keys( data ).forEach( ( kind ) => {\n\t\t\tObject.keys( data[ kind ] ).forEach( ( name ) => {\n\t\t\t\tconst primaryKeys = Object.keys(\n\t\t\t\t\tdata[ kind ][ name ].edits\n\t\t\t\t).filter( ( primaryKey ) =>\n\t\t\t\t\thasEditsForEntityRecord( state, kind, name, primaryKey )\n\t\t\t\t);\n\n\t\t\t\tif ( primaryKeys.length ) {\n\t\t\t\t\tconst entity = getEntity( state, kind, name );\n\t\t\t\t\tprimaryKeys.forEach( ( primaryKey ) => {\n\t\t\t\t\t\tconst entityRecord = getEditedEntityRecord(\n\t\t\t\t\t\t\tstate,\n\t\t\t\t\t\t\tkind,\n\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\tprimaryKey\n\t\t\t\t\t\t);\n\t\t\t\t\t\tdirtyRecords.push( {\n\t\t\t\t\t\t\t// We avoid using primaryKey because it's transformed into a string\n\t\t\t\t\t\t\t// when it's used as an object key.\n\t\t\t\t\t\t\tkey:\n\t\t\t\t\t\t\t\tentityRecord[\n\t\t\t\t\t\t\t\t\tentity.key || DEFAULT_ENTITY_KEY\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\ttitle: ! entity.getTitle\n\t\t\t\t\t\t\t\t? ''\n\t\t\t\t\t\t\t\t: entity.getTitle( entityRecord ),\n\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\tkind,\n\t\t\t\t\t\t} );\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t} );\n\t\t} );\n\n\t\treturn dirtyRecords;\n\t},\n\t( state ) => [ state.entities.data ]\n);\n\n/**\n * Returns the specified entity record's edits.\n *\n * @param {Object} state    State tree.\n * @param {string} kind     Entity kind.\n * @param {string} name     Entity name.\n * @param {number} recordId Record ID.\n *\n * @return {Object?} The entity record's edits.\n */\nexport function getEntityRecordEdits( state, kind, name, recordId ) {\n\treturn get( state.entities.data, [ kind, name, 'edits', recordId ] );\n}\n\n/**\n * Returns the specified entity record's non transient edits.\n *\n * Transient edits don't create an undo level, and\n * are not considered for change detection.\n * They are defined in the entity's config.\n *\n * @param {Object} state    State tree.\n * @param {string} kind     Entity kind.\n * @param {string} name     Entity name.\n * @param {number} recordId Record ID.\n *\n * @return {Object?} The entity record's non transient edits.\n */\nexport const getEntityRecordNonTransientEdits = createSelector(\n\t( state, kind, name, recordId ) => {\n\t\tconst { transientEdits } = getEntity( state, kind, name ) || {};\n\t\tconst edits = getEntityRecordEdits( state, kind, name, recordId ) || {};\n\t\tif ( ! transientEdits ) {\n\t\t\treturn edits;\n\t\t}\n\t\treturn Object.keys( edits ).reduce( ( acc, key ) => {\n\t\t\tif ( ! transientEdits[ key ] ) {\n\t\t\t\tacc[ key ] = edits[ key ];\n\t\t\t}\n\t\t\treturn acc;\n\t\t}, {} );\n\t},\n\t( state ) => [ state.entities.config, state.entities.data ]\n);\n\n/**\n * Returns true if the specified entity record has edits,\n * and false otherwise.\n *\n * @param {Object} state    State tree.\n * @param {string} kind     Entity kind.\n * @param {string} name     Entity name.\n * @param {number} recordId Record ID.\n *\n * @return {boolean} Whether the entity record has edits or not.\n */\nexport function hasEditsForEntityRecord( state, kind, name, recordId ) {\n\treturn (\n\t\tisSavingEntityRecord( state, kind, name, recordId ) ||\n\t\tObject.keys(\n\t\t\tgetEntityRecordNonTransientEdits( state, kind, name, recordId )\n\t\t).length > 0\n\t);\n}\n\n/**\n * Returns the specified entity record, merged with its edits.\n *\n * @param {Object} state    State tree.\n * @param {string} kind     Entity kind.\n * @param {string} name     Entity name.\n * @param {number} recordId Record ID.\n *\n * @return {Object?} The entity record, merged with its edits.\n */\nexport const getEditedEntityRecord = createSelector(\n\t( state, kind, name, recordId ) => ( {\n\t\t...getRawEntityRecord( state, kind, name, recordId ),\n\t\t...getEntityRecordEdits( state, kind, name, recordId ),\n\t} ),\n\t( state ) => [ state.entities.data ]\n);\n\n/**\n * Returns true if the specified entity record is autosaving, and false otherwise.\n *\n * @param {Object} state    State tree.\n * @param {string} kind     Entity kind.\n * @param {string} name     Entity name.\n * @param {number} recordId Record ID.\n *\n * @return {boolean} Whether the entity record is autosaving or not.\n */\nexport function isAutosavingEntityRecord( state, kind, name, recordId ) {\n\tconst { pending, isAutosave } = get(\n\t\tstate.entities.data,\n\t\t[ kind, name, 'saving', recordId ],\n\t\t{}\n\t);\n\treturn Boolean( pending && isAutosave );\n}\n\n/**\n * Returns true if the specified entity record is saving, and false otherwise.\n *\n * @param {Object} state    State tree.\n * @param {string} kind     Entity kind.\n * @param {string} name     Entity name.\n * @param {number} recordId Record ID.\n *\n * @return {boolean} Whether the entity record is saving or not.\n */\nexport function isSavingEntityRecord( state, kind, name, recordId ) {\n\treturn get(\n\t\tstate.entities.data,\n\t\t[ kind, name, 'saving', recordId, 'pending' ],\n\t\tfalse\n\t);\n}\n\n/**\n * Returns true if the specified entity record is deleting, and false otherwise.\n *\n * @param {Object} state    State tree.\n * @param {string} kind     Entity kind.\n * @param {string} name     Entity name.\n * @param {number} recordId Record ID.\n *\n * @return {boolean} Whether the entity record is deleting or not.\n */\nexport function isDeletingEntityRecord( state, kind, name, recordId ) {\n\treturn get(\n\t\tstate.entities.data,\n\t\t[ kind, name, 'deleting', recordId, 'pending' ],\n\t\tfalse\n\t);\n}\n\n/**\n * Returns the specified entity record's last save error.\n *\n * @param {Object} state    State tree.\n * @param {string} kind     Entity kind.\n * @param {string} name     Entity name.\n * @param {number} recordId Record ID.\n *\n * @return {Object?} The entity record's save error.\n */\nexport function getLastEntitySaveError( state, kind, name, recordId ) {\n\treturn get( state.entities.data, [\n\t\tkind,\n\t\tname,\n\t\t'saving',\n\t\trecordId,\n\t\t'error',\n\t] );\n}\n\n/**\n * Returns the specified entity record's last delete error.\n *\n * @param {Object} state    State tree.\n * @param {string} kind     Entity kind.\n * @param {string} name     Entity name.\n * @param {number} recordId Record ID.\n *\n * @return {Object?} The entity record's save error.\n */\nexport function getLastEntityDeleteError( state, kind, name, recordId ) {\n\treturn get( state.entities.data, [\n\t\tkind,\n\t\tname,\n\t\t'deleting',\n\t\trecordId,\n\t\t'error',\n\t] );\n}\n\n/**\n * Returns the current undo offset for the\n * entity records edits history. The offset\n * represents how many items from the end\n * of the history stack we are at. 0 is the\n * last edit, -1 is the second last, and so on.\n *\n * @param {Object} state State tree.\n *\n * @return {number} The current undo offset.\n */\nfunction getCurrentUndoOffset( state ) {\n\treturn state.undo.offset;\n}\n\n/**\n * Returns the previous edit from the current undo offset\n * for the entity records edits history, if any.\n *\n * @param {Object} state State tree.\n *\n * @return {Object?} The edit.\n */\nexport function getUndoEdit( state ) {\n\treturn state.undo[ state.undo.length - 2 + getCurrentUndoOffset( state ) ];\n}\n\n/**\n * Returns the next edit from the current undo offset\n * for the entity records edits history, if any.\n *\n * @param {Object} state State tree.\n *\n * @return {Object?} The edit.\n */\nexport function getRedoEdit( state ) {\n\treturn state.undo[ state.undo.length + getCurrentUndoOffset( state ) ];\n}\n\n/**\n * Returns true if there is a previous edit from the current undo offset\n * for the entity records edits history, and false otherwise.\n *\n * @param {Object} state State tree.\n *\n * @return {boolean} Whether there is a previous edit or not.\n */\nexport function hasUndo( state ) {\n\treturn Boolean( getUndoEdit( state ) );\n}\n\n/**\n * Returns true if there is a next edit from the current undo offset\n * for the entity records edits history, and false otherwise.\n *\n * @param {Object} state State tree.\n *\n * @return {boolean} Whether there is a next edit or not.\n */\nexport function hasRedo( state ) {\n\treturn Boolean( getRedoEdit( state ) );\n}\n\n/**\n * Return the current theme.\n *\n * @param {Object} state Data state.\n *\n * @return {Object}      The current theme.\n */\nexport function getCurrentTheme( state ) {\n\treturn state.themes[ state.currentTheme ];\n}\n\n/**\n * Return theme supports data in the index.\n *\n * @param {Object} state Data state.\n *\n * @return {*}           Index data.\n */\nexport function getThemeSupports( state ) {\n\treturn state.themeSupports;\n}\n\n/**\n * Returns the embed preview for the given URL.\n *\n * @param {Object} state    Data state.\n * @param {string} url      Embedded URL.\n *\n * @return {*} Undefined if the preview has not been fetched, otherwise, the preview fetched from the embed preview API.\n */\nexport function getEmbedPreview( state, url ) {\n\treturn state.embedPreviews[ url ];\n}\n\n/**\n * Determines if the returned preview is an oEmbed link fallback.\n *\n * WordPress can be configured to return a simple link to a URL if it is not embeddable.\n * We need to be able to determine if a URL is embeddable or not, based on what we\n * get back from the oEmbed preview API.\n *\n * @param {Object} state    Data state.\n * @param {string} url      Embedded URL.\n *\n * @return {boolean} Is the preview for the URL an oEmbed link fallback.\n */\nexport function isPreviewEmbedFallback( state, url ) {\n\tconst preview = state.embedPreviews[ url ];\n\tconst oEmbedLinkCheck = '<a href=\"' + url + '\">' + url + '</a>';\n\tif ( ! preview ) {\n\t\treturn false;\n\t}\n\treturn preview.html === oEmbedLinkCheck;\n}\n\n/**\n * Returns whether the current user can upload media.\n *\n * Calling this may trigger an OPTIONS request to the REST API via the\n * `canUser()` resolver.\n *\n * https://developer.wordpress.org/rest-api/reference/\n *\n * @deprecated since 5.0. Callers should use the more generic `canUser()` selector instead of\n *             `hasUploadPermissions()`, e.g. `canUser( 'create', 'media' )`.\n *\n * @param {Object} state Data state.\n *\n * @return {boolean} Whether or not the user can upload media. Defaults to `true` if the OPTIONS\n *                   request is being made.\n */\nexport function hasUploadPermissions( state ) {\n\tdeprecated( \"select( 'core' ).hasUploadPermissions()\", {\n\t\talternative: \"select( 'core' ).canUser( 'create', 'media' )\",\n\t} );\n\treturn defaultTo( canUser( state, 'create', 'media' ), true );\n}\n\n/**\n * Returns whether the current user can perform the given action on the given\n * REST resource.\n *\n * Calling this may trigger an OPTIONS request to the REST API via the\n * `canUser()` resolver.\n *\n * https://developer.wordpress.org/rest-api/reference/\n *\n * @param {Object}   state            Data state.\n * @param {string}   action           Action to check. One of: 'create', 'read', 'update', 'delete'.\n * @param {string}   resource         REST resource to check, e.g. 'media' or 'posts'.\n * @param {string=}  id               Optional ID of the rest resource to check.\n *\n * @return {boolean|undefined} Whether or not the user can perform the action,\n *                             or `undefined` if the OPTIONS request is still being made.\n */\nexport function canUser( state, action, resource, id ) {\n\tconst key = compact( [ action, resource, id ] ).join( '/' );\n\treturn get( state, [ 'userPermissions', key ] );\n}\n\n/**\n * Returns the latest autosaves for the post.\n *\n * May return multiple autosaves since the backend stores one autosave per\n * author for each post.\n *\n * @param {Object} state    State tree.\n * @param {string} postType The type of the parent post.\n * @param {number} postId   The id of the parent post.\n *\n * @return {?Array} An array of autosaves for the post, or undefined if there is none.\n */\nexport function getAutosaves( state, postType, postId ) {\n\treturn state.autosaves[ postId ];\n}\n\n/**\n * Returns the autosave for the post and author.\n *\n * @param {Object} state    State tree.\n * @param {string} postType The type of the parent post.\n * @param {number} postId   The id of the parent post.\n * @param {number} authorId The id of the author.\n *\n * @return {?Object} The autosave for the post and author.\n */\nexport function getAutosave( state, postType, postId, authorId ) {\n\tif ( authorId === undefined ) {\n\t\treturn;\n\t}\n\n\tconst autosaves = state.autosaves[ postId ];\n\treturn find( autosaves, { author: authorId } );\n}\n\n/**\n * Returns true if the REST request for autosaves has completed.\n *\n * @param {Object} state State tree.\n * @param {string} postType The type of the parent post.\n * @param {number} postId   The id of the parent post.\n *\n * @return {boolean} True if the REST request was completed. False otherwise.\n */\nexport const hasFetchedAutosaves = createRegistrySelector(\n\t( select ) => ( state, postType, postId ) => {\n\t\treturn select( REDUCER_KEY ).hasFinishedResolution( 'getAutosaves', [\n\t\t\tpostType,\n\t\t\tpostId,\n\t\t] );\n\t}\n);\n\n/**\n * Returns a new reference when edited values have changed. This is useful in\n * inferring where an edit has been made between states by comparison of the\n * return values using strict equality.\n *\n * @example\n *\n * ```\n * const hasEditOccurred = (\n *    getReferenceByDistinctEdits( beforeState ) !==\n *    getReferenceByDistinctEdits( afterState )\n * );\n * ```\n *\n * @param {Object} state Editor state.\n *\n * @return {*} A value whose reference will change only when an edit occurs.\n */\nexport const getReferenceByDistinctEdits = createSelector(\n\t() => [],\n\t( state ) => [\n\t\tstate.undo.length,\n\t\tstate.undo.offset,\n\t\tstate.undo.flattenedUndo,\n\t]\n);\n"]}