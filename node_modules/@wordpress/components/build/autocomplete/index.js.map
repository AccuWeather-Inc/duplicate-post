{"version":3,"sources":["@wordpress/components/src/autocomplete/index.js"],"names":["filterOptions","search","options","maxResults","filtered","i","length","option","keywords","label","isMatch","some","keyword","test","push","getRange","selection","window","getSelection","rangeCount","getRangeAt","getAutoCompleterUI","autocompleter","useItems","filterValue","items","setItems","isDebounced","loadOptions","promise","Promise","resolve","then","optionsData","canceled","keyedOptions","map","optionData","optionIndex","key","name","value","getOptionLabel","getOptionKeywords","isDisabled","isOptionDisabled","RegExp","cancel","AutocompleterUI","instanceId","listBoxId","className","selectedIndex","onChangeOptions","onSelect","onReset","index","Autocomplete","children","isSelected","record","onChange","onReplace","completers","debouncedSpeak","setSelectedIndex","filteredOptions","setFilteredOptions","setFilterValue","setAutocompleter","setAutocompleterUI","insertCompletion","replacement","end","start","triggerPrefix","toInsert","html","select","getOptionCompletion","completion","undefined","action","reset","announce","handleKeyDown","event","keyCode","UP","DOWN","ESCAPE","ENTER","LEFT","RIGHT","preventDefault","stopPropagation","textContent","text","textAfterSelection","completer","allowContext","lastIndexOf","slice","safeTrigger","match","query","selectedKey","isExpanded","activeId","onKeyDown"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport classnames from 'classnames';\nimport { escapeRegExp, find, map, debounce, deburr } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport {\n\trenderToString,\n\tuseEffect,\n\tuseLayoutEffect,\n\tuseState,\n} from '@wordpress/element';\nimport { ENTER, ESCAPE, UP, DOWN, LEFT, RIGHT } from '@wordpress/keycodes';\nimport { __, _n, sprintf } from '@wordpress/i18n';\nimport { useInstanceId } from '@wordpress/compose';\nimport {\n\tcreate,\n\tslice,\n\tinsert,\n\tisCollapsed,\n\tgetTextContent,\n} from '@wordpress/rich-text';\n\n/**\n * Internal dependencies\n */\nimport Button from '../button';\nimport Popover from '../popover';\nimport withSpokenMessages from '../higher-order/with-spoken-messages';\n\n/**\n * A raw completer option.\n *\n * @typedef {*} CompleterOption\n */\n\n/**\n * @callback FnGetOptions\n *\n * @return {(CompleterOption[]|Promise.<CompleterOption[]>)} The completer options or a promise for them.\n */\n\n/**\n * @callback FnGetOptionKeywords\n * @param {CompleterOption} option a completer option.\n *\n * @return {string[]} list of key words to search.\n */\n\n/**\n * @callback FnIsOptionDisabled\n * @param {CompleterOption} option a completer option.\n *\n * @return {string[]} whether or not the given option is disabled.\n */\n\n/**\n * @callback FnGetOptionLabel\n * @param {CompleterOption} option a completer option.\n *\n * @return {(string|Array.<(string|WPElement)>)} list of react components to render.\n */\n\n/**\n * @callback FnAllowContext\n * @param {string} before the string before the auto complete trigger and query.\n * @param {string} after  the string after the autocomplete trigger and query.\n *\n * @return {boolean} true if the completer can handle.\n */\n\n/**\n * @typedef {Object} OptionCompletion\n * @property {'insert-at-caret'|'replace'} action the intended placement of the completion.\n * @property {OptionCompletionValue} value the completion value.\n */\n\n/**\n * A completion value.\n *\n * @typedef {(string|WPElement|Object)} OptionCompletionValue\n */\n\n/**\n * @callback FnGetOptionCompletion\n * @param {CompleterOption} value the value of the completer option.\n * @param {string} query the text value of the autocomplete query.\n *\n * @return {(OptionCompletion|OptionCompletionValue)} the completion for the given option. If an\n * \t\t\t\t\t\t\t\t\t\t\t\t\t   OptionCompletionValue is returned, the\n * \t\t\t\t\t\t\t\t\t\t\t\t\t   completion action defaults to `insert-at-caret`.\n */\n\n/**\n * @typedef {Object} WPCompleter\n * @property {string} name a way to identify a completer, useful for selective overriding.\n * @property {?string} className A class to apply to the popup menu.\n * @property {string} triggerPrefix the prefix that will display the menu.\n * @property {(CompleterOption[]|FnGetOptions)} options the completer options or a function to get them.\n * @property {?FnGetOptionKeywords} getOptionKeywords get the keywords for a given option.\n * @property {?FnIsOptionDisabled} isOptionDisabled get whether or not the given option is disabled.\n * @property {FnGetOptionLabel} getOptionLabel get the label for a given option.\n * @property {?FnAllowContext} allowContext filter the context under which the autocomplete activates.\n * @property {FnGetOptionCompletion} getOptionCompletion get the completion associated with a given option.\n */\n\nfunction filterOptions( search, options = [], maxResults = 10 ) {\n\tconst filtered = [];\n\tfor ( let i = 0; i < options.length; i++ ) {\n\t\tconst option = options[ i ];\n\n\t\t// Merge label into keywords\n\t\tlet { keywords = [] } = option;\n\t\tif ( 'string' === typeof option.label ) {\n\t\t\tkeywords = [ ...keywords, option.label ];\n\t\t}\n\n\t\tconst isMatch = keywords.some( ( keyword ) =>\n\t\t\tsearch.test( deburr( keyword ) )\n\t\t);\n\t\tif ( ! isMatch ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tfiltered.push( option );\n\n\t\t// Abort early if max reached\n\t\tif ( filtered.length === maxResults ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn filtered;\n}\n\nfunction getRange() {\n\tconst selection = window.getSelection();\n\treturn selection.rangeCount ? selection.getRangeAt( 0 ) : null;\n}\n\nconst getAutoCompleterUI = ( autocompleter ) => {\n\tconst useItems = autocompleter.useItems\n\t\t? autocompleter.useItems\n\t\t: ( filterValue ) => {\n\t\t\t\tconst [ items, setItems ] = useState( [] );\n\t\t\t\t/*\n\t\t\t\t * We support both synchronous and asynchronous retrieval of completer options\n\t\t\t\t * but internally treat all as async so we maintain a single, consistent code path.\n\t\t\t\t *\n\t\t\t\t * Because networks can be slow, and the internet is wonderfully unpredictable,\n\t\t\t\t * we don't want two promises updating the state at once. This ensures that only\n\t\t\t\t * the most recent promise will act on `optionsData`. This doesn't use the state\n\t\t\t\t * because `setState` is batched, and so there's no guarantee that setting\n\t\t\t\t * `activePromise` in the state would result in it actually being in `this.state`\n\t\t\t\t * before the promise resolves and we check to see if this is the active promise or not.\n\t\t\t\t */\n\t\t\t\tuseLayoutEffect( () => {\n\t\t\t\t\tconst { options, isDebounced } = autocompleter;\n\t\t\t\t\tconst loadOptions = debounce(\n\t\t\t\t\t\t() => {\n\t\t\t\t\t\t\tconst promise = Promise.resolve(\n\t\t\t\t\t\t\t\ttypeof options === 'function'\n\t\t\t\t\t\t\t\t\t? options( filterValue )\n\t\t\t\t\t\t\t\t\t: options\n\t\t\t\t\t\t\t).then( ( optionsData ) => {\n\t\t\t\t\t\t\t\tif ( promise.canceled ) {\n\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tconst keyedOptions = optionsData.map(\n\t\t\t\t\t\t\t\t\t( optionData, optionIndex ) => ( {\n\t\t\t\t\t\t\t\t\t\tkey: `${ autocompleter.name }-${ optionIndex }`,\n\t\t\t\t\t\t\t\t\t\tvalue: optionData,\n\t\t\t\t\t\t\t\t\t\tlabel: autocompleter.getOptionLabel(\n\t\t\t\t\t\t\t\t\t\t\toptionData\n\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\tkeywords: autocompleter.getOptionKeywords\n\t\t\t\t\t\t\t\t\t\t\t? autocompleter.getOptionKeywords(\n\t\t\t\t\t\t\t\t\t\t\t\t\toptionData\n\t\t\t\t\t\t\t\t\t\t\t  )\n\t\t\t\t\t\t\t\t\t\t\t: [],\n\t\t\t\t\t\t\t\t\t\tisDisabled: autocompleter.isOptionDisabled\n\t\t\t\t\t\t\t\t\t\t\t? autocompleter.isOptionDisabled(\n\t\t\t\t\t\t\t\t\t\t\t\t\toptionData\n\t\t\t\t\t\t\t\t\t\t\t  )\n\t\t\t\t\t\t\t\t\t\t\t: false,\n\t\t\t\t\t\t\t\t\t} )\n\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t// create a regular expression to filter the options\n\t\t\t\t\t\t\t\tconst search = new RegExp(\n\t\t\t\t\t\t\t\t\t'(?:\\\\b|\\\\s|^)' +\n\t\t\t\t\t\t\t\t\t\tescapeRegExp( filterValue ),\n\t\t\t\t\t\t\t\t\t'i'\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tsetItems(\n\t\t\t\t\t\t\t\t\tfilterOptions( search, keyedOptions )\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t} );\n\n\t\t\t\t\t\t\treturn promise;\n\t\t\t\t\t\t},\n\t\t\t\t\t\tisDebounced ? 250 : 0\n\t\t\t\t\t);\n\n\t\t\t\t\tconst promise = loadOptions();\n\n\t\t\t\t\treturn () => {\n\t\t\t\t\t\tloadOptions.cancel();\n\t\t\t\t\t\tif ( promise ) {\n\t\t\t\t\t\t\tpromise.canceled = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t}, [ filterValue ] );\n\n\t\t\t\treturn [ items ];\n\t\t  };\n\n\tfunction AutocompleterUI( {\n\t\tfilterValue,\n\t\tinstanceId,\n\t\tlistBoxId,\n\t\tclassName,\n\t\tselectedIndex,\n\t\tonChangeOptions,\n\t\tonSelect,\n\t\tonReset,\n\t} ) {\n\t\tconst [ items ] = useItems( filterValue );\n\t\tuseLayoutEffect( () => {\n\t\t\tonChangeOptions( items );\n\t\t}, [ items ] );\n\n\t\tif ( ! items.length > 0 ) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn (\n\t\t\t<Popover\n\t\t\t\tfocusOnMount={ false }\n\t\t\t\tonClose={ onReset }\n\t\t\t\tposition=\"top right\"\n\t\t\t\tclassName=\"components-autocomplete__popover\"\n\t\t\t\tanchorRef={ getRange() }\n\t\t\t>\n\t\t\t\t<div\n\t\t\t\t\tid={ listBoxId }\n\t\t\t\t\trole=\"listbox\"\n\t\t\t\t\tclassName=\"components-autocomplete__results\"\n\t\t\t\t>\n\t\t\t\t\t{ map( items, ( option, index ) => (\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tkey={ option.key }\n\t\t\t\t\t\t\tid={ `components-autocomplete-item-${ instanceId }-${ option.key }` }\n\t\t\t\t\t\t\trole=\"option\"\n\t\t\t\t\t\t\taria-selected={ index === selectedIndex }\n\t\t\t\t\t\t\tdisabled={ option.isDisabled }\n\t\t\t\t\t\t\tclassName={ classnames(\n\t\t\t\t\t\t\t\t'components-autocomplete__result',\n\t\t\t\t\t\t\t\tclassName,\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t'is-selected': index === selectedIndex,\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t) }\n\t\t\t\t\t\t\tonClick={ () => onSelect( option ) }\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{ option.label }\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t) ) }\n\t\t\t\t</div>\n\t\t\t</Popover>\n\t\t);\n\t}\n\n\treturn AutocompleterUI;\n};\n\nfunction Autocomplete( {\n\tchildren,\n\tisSelected,\n\trecord,\n\tonChange,\n\tonReplace,\n\tcompleters,\n\tdebouncedSpeak,\n} ) {\n\tconst instanceId = useInstanceId( Autocomplete );\n\tconst [ selectedIndex, setSelectedIndex ] = useState( 0 );\n\tconst [ filteredOptions, setFilteredOptions ] = useState( [] );\n\tconst [ filterValue, setFilterValue ] = useState( '' );\n\tconst [ autocompleter, setAutocompleter ] = useState( null );\n\tconst [ AutocompleterUI, setAutocompleterUI ] = useState( null );\n\n\tfunction insertCompletion( replacement ) {\n\t\tconst end = record.start;\n\t\tconst start =\n\t\t\tend - autocompleter.triggerPrefix.length - filterValue.length;\n\t\tconst toInsert = create( { html: renderToString( replacement ) } );\n\n\t\tonChange( insert( record, toInsert, start, end ) );\n\t}\n\n\tfunction select( option ) {\n\t\tconst { getOptionCompletion } = autocompleter || {};\n\n\t\tif ( option.isDisabled ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( getOptionCompletion ) {\n\t\t\tconst completion = getOptionCompletion( option.value, filterValue );\n\n\t\t\tconst { action, value } =\n\t\t\t\tundefined === completion.action ||\n\t\t\t\tundefined === completion.value\n\t\t\t\t\t? { action: 'insert-at-caret', value: completion }\n\t\t\t\t\t: completion;\n\n\t\t\tif ( 'replace' === action ) {\n\t\t\t\tonReplace( [ value ] );\n\t\t\t} else if ( 'insert-at-caret' === action ) {\n\t\t\t\tinsertCompletion( value );\n\t\t\t}\n\t\t}\n\n\t\t// Reset autocomplete state after insertion rather than before\n\t\t// so insertion events don't cause the completion menu to redisplay.\n\t\treset();\n\t}\n\n\tfunction reset() {\n\t\tsetSelectedIndex( 0 );\n\t\tsetFilteredOptions( [] );\n\t\tsetFilterValue( '' );\n\t\tsetAutocompleter( null );\n\t\tsetAutocompleterUI( null );\n\t}\n\n\tfunction announce( options ) {\n\t\tif ( ! debouncedSpeak ) {\n\t\t\treturn;\n\t\t}\n\t\tif ( !! options.length ) {\n\t\t\tdebouncedSpeak(\n\t\t\t\tsprintf(\n\t\t\t\t\t/* translators: %d: number of results. */\n\t\t\t\t\t_n(\n\t\t\t\t\t\t'%d result found, use up and down arrow keys to navigate.',\n\t\t\t\t\t\t'%d results found, use up and down arrow keys to navigate.',\n\t\t\t\t\t\toptions.length\n\t\t\t\t\t),\n\t\t\t\t\toptions.length\n\t\t\t\t),\n\t\t\t\t'assertive'\n\t\t\t);\n\t\t} else {\n\t\t\tdebouncedSpeak( __( 'No results.' ), 'assertive' );\n\t\t}\n\t}\n\n\t/**\n\t * Load options for an autocompleter.\n\t *\n\t * @param {Array} options\n\t */\n\tfunction onChangeOptions( options ) {\n\t\tsetSelectedIndex(\n\t\t\toptions.length === filteredOptions.length ? selectedIndex : 0\n\t\t);\n\t\tsetFilteredOptions( options );\n\t\tannounce( options );\n\t}\n\n\tfunction handleKeyDown( event ) {\n\t\tif ( ! autocompleter ) {\n\t\t\treturn;\n\t\t}\n\t\tif ( filteredOptions.length === 0 ) {\n\t\t\treturn;\n\t\t}\n\t\tswitch ( event.keyCode ) {\n\t\t\tcase UP:\n\t\t\t\tsetSelectedIndex(\n\t\t\t\t\t( selectedIndex === 0\n\t\t\t\t\t\t? filteredOptions.length\n\t\t\t\t\t\t: selectedIndex ) - 1\n\t\t\t\t);\n\t\t\t\tbreak;\n\n\t\t\tcase DOWN:\n\t\t\t\tsetSelectedIndex(\n\t\t\t\t\t( selectedIndex + 1 ) % filteredOptions.length\n\t\t\t\t);\n\t\t\t\tbreak;\n\n\t\t\tcase ESCAPE:\n\t\t\t\tsetAutocompleter( null );\n\t\t\t\tsetAutocompleterUI( null );\n\t\t\t\tbreak;\n\n\t\t\tcase ENTER:\n\t\t\t\tselect( filteredOptions[ selectedIndex ] );\n\t\t\t\tbreak;\n\n\t\t\tcase LEFT:\n\t\t\tcase RIGHT:\n\t\t\t\treset();\n\t\t\t\treturn;\n\n\t\t\tdefault:\n\t\t\t\treturn;\n\t\t}\n\n\t\t// Any handled keycode should prevent original behavior. This relies on\n\t\t// the early return in the default case.\n\t\tevent.preventDefault();\n\t\tevent.stopPropagation();\n\t}\n\n\tlet textContent;\n\n\tif ( isCollapsed( record ) ) {\n\t\ttextContent = getTextContent( slice( record, 0 ) );\n\t}\n\n\tuseEffect( () => {\n\t\tif ( ! textContent ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst text = deburr( textContent );\n\t\tconst textAfterSelection = getTextContent(\n\t\t\tslice( record, undefined, getTextContent( record ).length )\n\t\t);\n\t\tconst completer = find(\n\t\t\tcompleters,\n\t\t\t( { triggerPrefix, allowContext } ) => {\n\t\t\t\tconst index = text.lastIndexOf( triggerPrefix );\n\n\t\t\t\tif ( index === -1 ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\tallowContext &&\n\t\t\t\t\t! allowContext( text.slice( 0, index ), textAfterSelection )\n\t\t\t\t) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\treturn /^\\S*$/.test(\n\t\t\t\t\ttext.slice( index + triggerPrefix.length )\n\t\t\t\t);\n\t\t\t}\n\t\t);\n\n\t\tif ( ! completer ) {\n\t\t\treset();\n\t\t\treturn;\n\t\t}\n\n\t\tconst safeTrigger = escapeRegExp( completer.triggerPrefix );\n\t\tconst match = text.match( new RegExp( `${ safeTrigger }(\\\\S*)$` ) );\n\t\tconst query = match && match[ 1 ];\n\n\t\tsetAutocompleter( completer );\n\t\tsetAutocompleterUI( () =>\n\t\t\tcompleter !== autocompleter\n\t\t\t\t? getAutoCompleterUI( completer )\n\t\t\t\t: AutocompleterUI\n\t\t);\n\t\tsetFilterValue( query );\n\t}, [ textContent ] );\n\n\tconst { key: selectedKey = '' } = filteredOptions[ selectedIndex ] || {};\n\tconst { className } = autocompleter || {};\n\tconst isExpanded = !! autocompleter && filteredOptions.length > 0;\n\tconst listBoxId = isExpanded\n\t\t? `components-autocomplete-listbox-${ instanceId }`\n\t\t: null;\n\tconst activeId = isExpanded\n\t\t? `components-autocomplete-item-${ instanceId }-${ selectedKey }`\n\t\t: null;\n\n\treturn (\n\t\t<>\n\t\t\t{ children( {\n\t\t\t\tisExpanded,\n\t\t\t\tlistBoxId,\n\t\t\t\tactiveId,\n\t\t\t\tonKeyDown: handleKeyDown,\n\t\t\t} ) }\n\t\t\t{ isSelected && AutocompleterUI && (\n\t\t\t\t<AutocompleterUI\n\t\t\t\t\tclassName={ className }\n\t\t\t\t\tfilterValue={ filterValue }\n\t\t\t\t\tinstanceId={ instanceId }\n\t\t\t\t\tlistBoxId={ listBoxId }\n\t\t\t\t\tselectedIndex={ selectedIndex }\n\t\t\t\t\tonChangeOptions={ onChangeOptions }\n\t\t\t\t\tonSelect={ select }\n\t\t\t\t/>\n\t\t\t) }\n\t\t</>\n\t);\n}\n\nexport default withSpokenMessages( Autocomplete );\n"]}