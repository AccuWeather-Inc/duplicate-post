import _extends from "@babel/runtime/helpers/esm/extends";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import { createElement } from "@wordpress/element";

/**
 * External dependencies
 */
import { debounce } from 'lodash';
/**
 * WordPress dependencies
 */

import { PanelBody, QueryControls, TextControl, FormTokenField, SelectControl } from '@wordpress/components';
import { __ } from '@wordpress/i18n';
import { InspectorControls } from '@wordpress/block-editor';
import { useSelect } from '@wordpress/data';
import { useEffect, useState, useCallback, useMemo } from '@wordpress/element';
/**
 * Internal dependencies
 */

import { getTermsInfo } from '../utils';
import { MAX_FETCHED_TERMS } from '../constants';
export default function QueryInspectorControls(_ref) {
  var _categories$terms, _tags$terms;

  var query = _ref.query,
      setQuery = _ref.setQuery;
  var order = query.order,
      orderBy = query.orderBy,
      selectedAuthorId = query.author,
      postType = query.postType;

  var _useState = useState(true),
      _useState2 = _slicedToArray(_useState, 2),
      showCategories = _useState2[0],
      setShowCategories = _useState2[1];

  var _useState3 = useState(true),
      _useState4 = _slicedToArray(_useState3, 2),
      showTags = _useState4[0],
      setShowTags = _useState4[1];

  var _useSelect = useSelect(function (select) {
    var _getPostTypes;

    var _select = select('core'),
        getEntityRecords = _select.getEntityRecords,
        getPostTypes = _select.getPostTypes;

    var termsQuery = {
      per_page: MAX_FETCHED_TERMS
    };

    var _categories = getEntityRecords('taxonomy', 'category', termsQuery);

    var _tags = getEntityRecords('taxonomy', 'post_tag', termsQuery);

    var excludedPostTypes = ['attachment'];
    var filteredPostTypes = (_getPostTypes = getPostTypes()) === null || _getPostTypes === void 0 ? void 0 : _getPostTypes.filter(function (_ref2) {
      var viewable = _ref2.viewable,
          slug = _ref2.slug;
      return viewable && !excludedPostTypes.includes(slug);
    });
    return {
      categories: getTermsInfo(_categories),
      tags: getTermsInfo(_tags),
      authorList: getEntityRecords('root', 'user', {
        per_page: -1
      }),
      postTypes: filteredPostTypes
    };
  }, []),
      authorList = _useSelect.authorList,
      categories = _useSelect.categories,
      tags = _useSelect.tags,
      postTypes = _useSelect.postTypes;

  var postTypesTaxonomiesMap = useMemo(function () {
    if (!(postTypes === null || postTypes === void 0 ? void 0 : postTypes.length)) return;
    return postTypes.reduce(function (accumulator, type) {
      accumulator[type.slug] = type.taxonomies;
      return accumulator;
    }, {});
  }, [postTypes]);
  useEffect(function () {
    if (!postTypesTaxonomiesMap) return;
    var postTypeTaxonomies = postTypesTaxonomiesMap[postType];
    setShowCategories(postTypeTaxonomies.includes('category'));
    setShowTags(postTypeTaxonomies.includes('post_tag'));
  }, [postType, postTypesTaxonomiesMap]);
  var postTypesSelectOptions = useMemo(function () {
    return (postTypes || []).map(function (_ref3) {
      var labels = _ref3.labels,
          slug = _ref3.slug;
      return {
        label: labels.singular_name,
        value: slug
      };
    });
  }, [postTypes]);

  var onPostTypeChange = function onPostTypeChange(newValue) {
    var updateQuery = {
      postType: newValue
    };

    if (!postTypesTaxonomiesMap[newValue].includes('category')) {
      updateQuery.categoryIds = [];
    }

    if (!postTypesTaxonomiesMap[newValue].includes('post_tag')) {
      updateQuery.tagIds = [];
    }

    setQuery(updateQuery);
  }; // Handles categories and tags changes.


  var onTermsChange = function onTermsChange(terms, queryProperty) {
    return function (newTermValues) {
      var termIds = newTermValues.reduce(function (accumulator, termValue) {
        var _terms$mapByName$term;

        var termId = (termValue === null || termValue === void 0 ? void 0 : termValue.id) || ((_terms$mapByName$term = terms.mapByName[termValue]) === null || _terms$mapByName$term === void 0 ? void 0 : _terms$mapByName$term.id);
        if (termId) accumulator.push(termId);
        return accumulator;
      }, []);
      setQuery(_defineProperty({}, queryProperty, termIds));
    };
  };

  var onCategoriesChange = onTermsChange(categories, 'categoryIds');
  var onTagsChange = onTermsChange(tags, 'tagIds');

  var _useState5 = useState(query.search),
      _useState6 = _slicedToArray(_useState5, 2),
      querySearch = _useState6[0],
      setQuerySearch = _useState6[1];

  var onChangeDebounced = useCallback(debounce(function () {
    return setQuery({
      search: querySearch
    });
  }, 250), [querySearch]);
  useEffect(function () {
    onChangeDebounced();
    return onChangeDebounced.cancel;
  }, [querySearch, onChangeDebounced]);
  return createElement(InspectorControls, null, createElement(PanelBody, {
    title: __('Filtering and Sorting')
  }, createElement(SelectControl, {
    options: postTypesSelectOptions,
    value: postType,
    label: __('Post Type'),
    onChange: onPostTypeChange
  }), showCategories && (categories === null || categories === void 0 ? void 0 : (_categories$terms = categories.terms) === null || _categories$terms === void 0 ? void 0 : _categories$terms.length) > 0 && createElement(FormTokenField, {
    label: __('Categories'),
    value: (query.categoryIds || []).map(function (categoryId) {
      return {
        id: categoryId,
        value: categories.mapById[categoryId].name
      };
    }),
    suggestions: categories.names,
    onChange: onCategoriesChange
  }), showTags && (tags === null || tags === void 0 ? void 0 : (_tags$terms = tags.terms) === null || _tags$terms === void 0 ? void 0 : _tags$terms.length) > 0 && createElement(FormTokenField, {
    label: __('Tags'),
    value: (query.tagIds || []).map(function (tagId) {
      return {
        id: tagId,
        value: tags.mapById[tagId].name
      };
    }),
    suggestions: tags.names,
    onChange: onTagsChange
  }), createElement(QueryControls, _extends({
    order: order,
    orderBy: orderBy,
    selectedAuthorId: selectedAuthorId,
    authorList: authorList
  }, {
    onOrderChange: function onOrderChange(value) {
      return setQuery({
        order: value
      });
    },
    onOrderByChange: function onOrderByChange(value) {
      return setQuery({
        orderBy: value
      });
    },
    onAuthorChange: function onAuthorChange(value) {
      return setQuery({
        author: value !== '' ? +value : undefined
      });
    }
  })), createElement(TextControl, {
    label: __('Search'),
    value: querySearch,
    onChange: setQuerySearch
  })));
}
//# sourceMappingURL=query-inspector-controls.js.map