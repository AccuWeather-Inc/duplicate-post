import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import { createElement } from "@wordpress/element";

/**
 * External dependencies
 */
import { debounce } from 'lodash';
import { View } from 'react-native';
/**
 * WordPress dependencies
 */

import { __experimentalAlignmentHookSettingsProvider as AlignmentHookSettingsProvider, InnerBlocks } from '@wordpress/block-editor';
import { createBlock } from '@wordpress/blocks';
import { useResizeObserver } from '@wordpress/compose';
import { useDispatch, useSelect } from '@wordpress/data';
import { useState, useEffect, useRef } from '@wordpress/element';
/**
 * Internal dependencies
 */

import { name as buttonBlockName } from '../button/';
import styles from './editor.scss';
var ALLOWED_BLOCKS = [buttonBlockName];
var BUTTONS_TEMPLATE = [['core/button']];
export default function ButtonsEdit(_ref) {
  var align = _ref.attributes.align,
      clientId = _ref.clientId,
      isSelected = _ref.isSelected;

  var _useResizeObserver = useResizeObserver(),
      _useResizeObserver2 = _slicedToArray(_useResizeObserver, 2),
      resizeObserver = _useResizeObserver2[0],
      sizes = _useResizeObserver2[1];

  var _useState = useState(0),
      _useState2 = _slicedToArray(_useState, 2),
      maxWidth = _useState2[0],
      setMaxWidth = _useState2[1];

  var spacing = styles.spacing.marginLeft;

  var _useSelect = useSelect(function (select) {
    var _select = select('core/block-editor'),
        getBlockCount = _select.getBlockCount,
        _getBlockOrder = _select.getBlockOrder,
        getBlockParents = _select.getBlockParents,
        getSelectedBlockClientId = _select.getSelectedBlockClientId;

    var selectedBlockClientId = getSelectedBlockClientId();
    var selectedBlockParents = getBlockParents(selectedBlockClientId, true);
    return {
      getBlockOrder: _getBlockOrder,
      isInnerButtonSelected: selectedBlockParents[0] === clientId,
      // The purpose of `shouldDelete` check is giving the ability to
      // pass to mobile toolbar function called `onDelete` which removes
      // the whole `Buttons` container along with the last inner button
      // when there is exactly one button.
      shouldDelete: getBlockCount(clientId) === 1
    };
  }, [clientId]),
      getBlockOrder = _useSelect.getBlockOrder,
      isInnerButtonSelected = _useSelect.isInnerButtonSelected,
      shouldDelete = _useSelect.shouldDelete;

  var _useDispatch = useDispatch('core/block-editor'),
      insertBlock = _useDispatch.insertBlock,
      removeBlock = _useDispatch.removeBlock,
      selectBlock = _useDispatch.selectBlock;

  useEffect(function () {
    var margins = 2 * styles.parent.marginRight;

    var _ref2 = sizes || {},
        width = _ref2.width;

    if (width) {
      setMaxWidth(width - margins);
    }
  }, [sizes]);
  var onAddNextButton = debounce(function (selectedId) {
    var order = getBlockOrder(clientId);
    var selectedButtonIndex = order.findIndex(function (i) {
      return i === selectedId;
    });
    var index = selectedButtonIndex === -1 ? order.length + 1 : selectedButtonIndex;
    var insertedBlock = createBlock('core/button');
    insertBlock(insertedBlock, index, clientId);
    selectBlock(insertedBlock.clientId);
  }, 200);
  var renderFooterAppender = useRef(function () {
    return createElement(View, {
      style: styles.appenderContainer
    }, createElement(InnerBlocks.ButtonBlockAppender, {
      isFloating: true,
      onAddBlock: onAddNextButton
    }));
  }); // Inside buttons block alignment options are not supported.

  var alignmentHooksSetting = {
    isEmbedButton: true
  };
  var shouldRenderFooterAppender = isSelected || isInnerButtonSelected;
  return createElement(AlignmentHookSettingsProvider, {
    value: alignmentHooksSetting
  }, resizeObserver, createElement(InnerBlocks, {
    allowedBlocks: ALLOWED_BLOCKS,
    template: BUTTONS_TEMPLATE,
    renderFooterAppender: shouldRenderFooterAppender && renderFooterAppender.current,
    orientation: "horizontal",
    horizontalAlignment: align,
    onDeleteBlock: shouldDelete ? function () {
      return removeBlock(clientId);
    } : undefined,
    onAddBlock: onAddNextButton,
    parentWidth: maxWidth,
    marginHorizontal: spacing,
    marginVertical: spacing
  }));
}
//# sourceMappingURL=edit.native.js.map