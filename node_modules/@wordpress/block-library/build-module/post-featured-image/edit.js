import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import { createElement, Fragment } from "@wordpress/element";

/**
 * WordPress dependencies
 */
import { useEntityProp } from '@wordpress/core-data';
import { useSelect } from '@wordpress/data';
import { Icon, ToggleControl, PanelBody } from '@wordpress/components';
import { __, sprintf } from '@wordpress/i18n';
import { postFeaturedImage as icon } from '@wordpress/icons';
import { InspectorControls, useBlockProps } from '@wordpress/block-editor';
var placeholderChip = createElement("div", {
  className: "post-featured-image_placeholder"
}, createElement(Icon, {
  icon: icon
}), createElement("p", null, " ", __('Featured Image')));

function PostFeaturedImageDisplay(_ref) {
  var isLink = _ref.attributes.isLink,
      setAttributes = _ref.setAttributes,
      _ref$context = _ref.context,
      postId = _ref$context.postId,
      postType = _ref$context.postType;

  var _useEntityProp = useEntityProp('postType', postType, 'featured_media', postId),
      _useEntityProp2 = _slicedToArray(_useEntityProp, 1),
      featuredImage = _useEntityProp2[0];

  var media = useSelect(function (select) {
    return featuredImage && select('core').getMedia(featuredImage);
  }, [featuredImage]);
  var image = !media ? placeholderChip : createElement("img", {
    src: media.source_url,
    alt: media.alt_text || __('No alternative text set')
  });
  return createElement(Fragment, null, createElement(InspectorControls, null, createElement(PanelBody, {
    title: __('Link settings')
  }, createElement(ToggleControl, {
    label: sprintf( // translators: %s: Name of the post type e.g: "post".
    __('Link to %s'), postType),
    onChange: function onChange() {
      return setAttributes({
        isLink: !isLink
      });
    },
    checked: isLink
  }))), createElement("div", useBlockProps(), image));
}

export default function PostFeaturedImageEdit(props) {
  var _props$context;

  if (!((_props$context = props.context) === null || _props$context === void 0 ? void 0 : _props$context.postId)) {
    return placeholderChip;
  }

  return createElement(PostFeaturedImageDisplay, props);
}
//# sourceMappingURL=edit.js.map